const { sendTextMessage, sendInteractiveButtons, sendInteractiveList } = require('./whatsappService');
const { getCategorie      });
    }

    await sendInteractiveList(
      userPhone,
      'Catalogo de Autopartes\n\nSelecciona una categoria:',
      'Ver Catalogo',
      sections
    );
  } catch (error) {
    console.error('Error mostrando categor√≠as:', error);tegories, getProducts } = require('./ecommerceService');

// Almacenamiento temporal de sesiones de usuario (en producci√≥n usa Redis o DB)
const userSessions = {};

/**
 * Maneja la selecci√≥n del men√∫ seg√∫n el mensaje del usuario
 */
const handleMenuSelection = async (userPhone, message) => {
  const messageText = message.toLowerCase().trim();

  // Inicializar sesi√≥n si no existe
  if (!userSessions[userPhone]) {
    userSessions[userPhone] = {
      state: 'MAIN_MENU',
      cart: [],
      selectedCategory: null,
      selectedSubcategory: null
    };
  }

  const session = userSessions[userPhone];

  try {
    // Comandos globales
    if (messageText === 'hola' || messageText === 'menu' || messageText === 'inicio') {
      await showMainMenu(userPhone);
      return;
    }

    // Navegaci√≥n seg√∫n el estado de la sesi√≥n
    switch (session.state) {
      case 'MAIN_MENU':
        await handleMainMenuSelection(userPhone, messageText);
        break;
      
      case 'CATEGORY_LIST':
        await handleCategorySelection(userPhone, messageText);
        break;
      
      case 'SUBCATEGORY_LIST':
        await handleSubcategorySelection(userPhone, messageText);
        break;
      
      case 'PRODUCT_LIST':
        await handleProductSelection(userPhone, messageText);
        break;
      
      case 'CART':
        await handleCartActions(userPhone, messageText);
        break;
      
      default:
        await showMainMenu(userPhone);
    }
  } catch (error) {
    console.error('Error en handleMenuSelection:', error);
    await sendTextMessage(userPhone, '‚ùå Ocurri√≥ un error. Escribe "menu" para volver al inicio.');
  }
};

/**
 * Muestra el men√∫ principal
 */
const showMainMenu = async (userPhone) => {
  userSessions[userPhone].state = 'MAIN_MENU';
  
  const welcomeMessage = `üõí *¬°Bienvenido a AutoPartes Store!*

Soy tu asistente virtual para ayudarte a encontrar las autopartes que necesitas.

Escribe *"catalogo"* para ver nuestros productos disponibles.`;

  await sendTextMessage(userPhone, welcomeMessage);
  
  // Mostrar directamente el cat√°logo
  setTimeout(() => {
    showCategories(userPhone);
  }, 1000);
};

/**
 * Maneja la selecci√≥n del men√∫ principal
 */
const handleMainMenuSelection = async (userPhone, selection) => {
  if (selection.includes('catalogo') || selection.includes('categoria') || selection === '1') {
    await showCategories(userPhone);
  } else {
    await sendTextMessage(userPhone, 'Escribe *"catalogo"* para ver nuestros productos o *"menu"* para volver al inicio.');
  }
};

/**
 * Muestra las categor√≠as disponibles
 */
const showCategories = async (userPhone) => {
  userSessions[userPhone].state = 'CATEGORY_LIST';
  
  await sendTextMessage(userPhone, '‚è≥ Cargando cat√°logo...');
  
  try {
    const categories = await getCategories();
    
    if (!categories || categories.length === 0) {
      await sendTextMessage(userPhone, '‚ùå No hay categor√≠as disponibles en este momento.');
      await showMainMenu(userPhone);
      return;
    }

    // Dividir categor√≠as en m√∫ltiples secciones si hay m√°s de 10
    const sections = [];
    const itemsPerSection = 10;
    
    for (let i = 0; i < categories.length; i += itemsPerSection) {
      const chunk = categories.slice(i, i + itemsPerSection);
      
      sections.push({
        title: 'Catalogo',
        rows: chunk.map(cat => ({
          id: `cat_${cat.id}`,
          title: cat.name.substring(0, 24), // WhatsApp limita a 24 caracteres
          description: `${cat.subcategory_count || 0} subcategorias`
        }))
      });
    }

    await sendInteractiveList(
      userPhone,
      'ÔøΩ *Cat√°logo de Autopartes*\n\nSelecciona una categor√≠a para explorar nuestros productos:',
      'üìã Ver Cat√°logo',
      sections
    );
  } catch (error) {
    console.error('Error mostrando categor√≠as:', error);
    await sendTextMessage(userPhone, '‚ùå Error al cargar el cat√°logo. Intenta de nuevo m√°s tarde.');
    await showMainMenu(userPhone);
  }
};

/**
 * Maneja la selecci√≥n de categor√≠a
 */
const handleCategorySelection = async (userPhone, selection) => {
  if (selection.startsWith('cat_')) {
    const categoryId = selection.replace('cat_', '');
    userSessions[userPhone].selectedCategory = categoryId;
    
    // Primero intentamos obtener subcategor√≠as
    await sendTextMessage(userPhone, '‚è≥ Cargando...');
    
    try {
      const subcategories = await getSubCategories(categoryId);
      
      if (subcategories && subcategories.length > 0) {
        // Si hay subcategor√≠as, las mostramos
        await showSubCategories(userPhone, categoryId, subcategories);
      } else {
        // Si no hay subcategor√≠as, mostramos productos directamente
        await showProducts(userPhone, categoryId);
      }
    } catch (error) {
      console.error('Error en handleCategorySelection:', error);
      await sendTextMessage(userPhone, '‚ùå Error al cargar. Intenta de nuevo.');
    }
  } else {
    await sendTextMessage(userPhone, 'Selecci√≥n no v√°lida. Escribe "menu" para volver al inicio.');
  }
};

/**
 * Muestra las subcategor√≠as de una categor√≠a
 */
const showSubCategories = async (userPhone, categoryId, subcategories) => {
  userSessions[userPhone].state = 'SUBCATEGORY_LIST';
  
  try {
    // Crear lista de subcategor√≠as
    const sections = [{
      title: 'Subcategor√≠as',
      rows: subcategories.slice(0, 10).map(subcat => ({
        id: `subcat_${subcat.id}`,
        title: subcat.name.substring(0, 24),
        description: `${subcat.product_count || 0} productos`
      }))
    }];

    await sendInteractiveList(
      userPhone,
      'üìÇ *Selecciona una subcategor√≠a:*',
      'üìã Ver Subcategor√≠as',
      sections
    );
  } catch (error) {
    console.error('Error mostrando subcategor√≠as:', error);
    await sendTextMessage(userPhone, '‚ùå Error al cargar subcategor√≠as.');
  }
};

/**
 * Maneja la selecci√≥n de subcategor√≠a
 */
const handleSubcategorySelection = async (userPhone, selection) => {
  if (selection.startsWith('subcat_')) {
    const subcategoryId = selection.replace('subcat_', '');
    userSessions[userPhone].selectedSubcategory = subcategoryId;
    await showProducts(userPhone, null, subcategoryId);
  } else {
    await sendTextMessage(userPhone, 'Selecci√≥n no v√°lida. Escribe "menu" para volver al inicio.');
  }
};

/**
 * Muestra los productos de una categor√≠a o subcategor√≠a
 */
const showProducts = async (userPhone, categoryId = null, subcategoryId = null) => {
  userSessions[userPhone].state = 'PRODUCT_LIST';
  
  await sendTextMessage(userPhone, '‚è≥ Cargando productos...');
  
  try {
    const products = await getProducts(categoryId, subcategoryId);
    
    if (!products || products.length === 0) {
      await sendTextMessage(userPhone, '‚ùå No hay productos disponibles en esta categor√≠a.');
      await showCategories(userPhone);
      return;
    }

    // Crear lista de productos con precios formateados
    const sections = [{
      title: 'Productos',
      rows: products.slice(0, 10).map(prod => {
        // Formatear precio: dividir por 100 si viene en centavos
        let priceText = 'Consultar';
        if (prod.price || prod.final_price || prod.base_price) {
          const price = prod.final_price || prod.price || prod.base_price;
          const formattedPrice = new Intl.NumberFormat('es-CO', {
            style: 'currency',
            currency: 'COP',
            minimumFractionDigits: 0
          }).format(price);
          priceText = formattedPrice;
        }
        
        return {
          id: `prod_${prod.id}`,
          title: (prod.code || prod.name).substring(0, 24),
          description: `${priceText} - ${prod.stock !== undefined ? `Stock: ${prod.stock}` : 'Disponible'}`
        };
      })
    }];

    await sendInteractiveList(
      userPhone,
      'üîß *Productos Disponibles*\n\nSelecciona un producto para ver m√°s detalles:',
      'üõçÔ∏è Ver Productos',
      sections
    );
  } catch (error) {
    console.error('Error mostrando productos:', error);
    await sendTextMessage(userPhone, '‚ùå Error al cargar productos. Intenta de nuevo m√°s tarde.');
    await showCategories(userPhone);
  }
};

/**
 * Muestra el carrito de compras
 */
const showCart = async (userPhone) => {
  const cart = userSessions[userPhone].cart;
  
  if (!cart || cart.length === 0) {
    await sendTextMessage(userPhone, 'üõí Tu carrito est√° vac√≠o.\n\nEscribe "menu" para ver nuestros productos.');
    return;
  }

  let cartMessage = 'üõí *Tu Carrito de Compras*\n\n';
  let total = 0;

  cart.forEach((item, index) => {
    const subtotal = item.price * item.quantity;
    total += subtotal;
    cartMessage += `${index + 1}. ${item.name}\n`;
    cartMessage += `   Cantidad: ${item.quantity} x $${item.price} = $${subtotal}\n\n`;
  });

  cartMessage += `üí∞ *Total: $${total.toFixed(2)}*`;

  await sendTextMessage(userPhone, cartMessage);
  
  const buttons = [
    { id: 'finalizar_compra', title: '‚úÖ Finalizar Compra' },
    { id: 'vaciar_carrito', title: 'üóëÔ∏è Vaciar Carrito' },
    { id: 'menu', title: 'üîô Volver al Men√∫' }
  ];

  await sendInteractiveButtons(userPhone, '¬øQu√© deseas hacer?', buttons);
};

/**
 * Muestra informaci√≥n de ayuda
 */
const showHelp = async (userPhone) => {
  const helpMessage = `‚ùì *Ayuda - AutoPartes Store*

*Comandos disponibles:*
‚Ä¢ "menu" o "inicio" - Volver al men√∫ principal
‚Ä¢ "categorias" - Ver categor√≠as de productos
‚Ä¢ "carrito" - Ver tu carrito de compras

*¬øC√≥mo comprar?*
1. Selecciona una categor√≠a
2. Elige un producto
3. Agrega al carrito
4. Finaliza tu compra

*Contacto:*
üìû Escribe "ayuda" en cualquier momento

¬øNecesitas algo m√°s?`;

  await sendTextMessage(userPhone, helpMessage);
  
  setTimeout(() => {
    showMainMenu(userPhone);
  }, 2000);
};

/**
 * Maneja las acciones del carrito
 */
const handleCartActions = async (userPhone, action) => {
  switch (action) {
    case 'finalizar_compra':
      await sendTextMessage(userPhone, '‚úÖ Procesando tu pedido...\n\nPronto recibir√°s la confirmaci√≥n y el enlace de pago.');
      // Aqu√≠ integrar√≠as con el sistema de pedidos del e-commerce
      userSessions[userPhone].cart = [];
      setTimeout(() => showMainMenu(userPhone), 2000);
      break;
    
    case 'vaciar_carrito':
      userSessions[userPhone].cart = [];
      await sendTextMessage(userPhone, 'üóëÔ∏è Carrito vaciado correctamente.');
      setTimeout(() => showMainMenu(userPhone), 1500);
      break;
    
    default:
      await showMainMenu(userPhone);
  }
};

/**
 * Maneja la selecci√≥n de producto
 */
const handleProductSelection = async (userPhone, selection) => {
  if (selection.startsWith('prod_')) {
    const productId = selection.replace('prod_', '');
    await sendTextMessage(userPhone, 'üîß Funci√≥n de agregar al carrito en desarrollo...\n\nEscribe "menu" para volver al inicio.');
  } else {
    await sendTextMessage(userPhone, 'Selecci√≥n no v√°lida. Escribe "menu" para volver al inicio.');
  }
};

module.exports = {
  handleMenuSelection,
  showMainMenu
};
