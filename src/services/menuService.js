const { sendTextMessage, sendInteractiveButtons, sendInteractiveList } = require('./whatsappService');
const { getCategories, getSubCategories, getProducts } = require('./ecommerceService');
const { getOrdersByEmail, formatOrdersList, formatOrderDetails, isValidEmail } = require('./orderService');
const {
  getCarBrands,
  getCarModels,
  getCategories: getProductCategories,
  getSubcategories: getProductSubcategories,
  searchProducts,
  formatProduct,
  formatProductList
} = require('./quoteService');
const conversationService = require('./conversationService');
const fs = require('fs');
const path = require('path');

// Almacenamiento temporal de sesiones de usuario (en producci√≥n usa Redis o DB)
const userSessions = {};

// Usuarios que est√°n hablando con un asesor
const usersWithAdvisor = new Map(); // { userPhone: { startTime: Date, lastAdvisorMessage: Date } }

const ADVISOR_PHONE = process.env.ADVISOR_PHONE_NUMBER || '573164088588';
const ADVISOR_CONVERSATION_TIMEOUT = 24 * 60 * 60 * 1000; // 24 horas en milisegundos
const INACTIVITY_TIMEOUT = parseInt(process.env.INACTIVITY_TIMEOUT_MINUTES || '20') * 60 * 1000; // 20 minutos de inactividad

// Configuraci√≥n de limpieza de sesiones antiguas
const MAX_SESSION_AGE = 1 * 24 * 60 * 60 * 1000; // 1 d√≠a (24 horas)
const CLEANUP_INTERVAL = 24 * 60 * 60 * 1000; // Limpiar cada 24 horas

// Ruta al archivo de promociones (en directorio persistente para Render)
const PROMO_FILE_PATH = path.join(__dirname, '../data/persistent/promoMessage.json');

// Mensaje por defecto
const DEFAULT_PROMO_MESSAGE = 'üî• *PROMOCIONES Y DESCUENTOS*\n\nActualmente no hay promociones activas.\n\nMantente atento a nuestras redes sociales.';

/**
 * Inicializa el archivo de promociones si no existe
 */
const initPromoFile = () => {
  try {
    // Crear directorio si no existe
    const dir = path.dirname(PROMO_FILE_PATH);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log('üìÅ Directorio de promociones creado:', dir);
    }

    // Crear archivo con mensaje por defecto si no existe
    if (!fs.existsSync(PROMO_FILE_PATH)) {
      const defaultData = {
        message: DEFAULT_PROMO_MESSAGE,
        lastUpdated: new Date().toISOString(),
        updatedBy: 'Sistema'
      };
      fs.writeFileSync(PROMO_FILE_PATH, JSON.stringify(defaultData, null, 2), 'utf8');
      console.log('‚úÖ Archivo de promociones inicializado con mensaje por defecto');
    } else {
      console.log('‚úÖ Archivo de promociones encontrado:', PROMO_FILE_PATH);
    }
  } catch (error) {
    console.error('‚ùå Error inicializando archivo de promociones:', error);
  }
};

// Inicializar archivo al cargar el m√≥dulo
initPromoFile();

/**
 * Lee el mensaje de promociones desde el archivo JSON
 */
const getPromoMessage = () => {
  try {
    if (fs.existsSync(PROMO_FILE_PATH)) {
      const data = fs.readFileSync(PROMO_FILE_PATH, 'utf8');
      const promoData = JSON.parse(data);
      return promoData.message;
    }
  } catch (error) {
    console.error('Error leyendo mensaje de promociones:', error);
  }
  // Fallback al mensaje por defecto
  return DEFAULT_PROMO_MESSAGE;
};

/**
 * Actualiza el mensaje de promociones (solo el asesor puede hacerlo)
 */
const updatePromoMessage = (newMessage, updatedBy = 'Asesor') => {
  try {
    const promoData = {
      message: newMessage,
      lastUpdated: new Date().toISOString(),
      updatedBy: updatedBy
    };
    
    // Crear directorio si no existe
    const dir = path.dirname(PROMO_FILE_PATH);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    
    fs.writeFileSync(PROMO_FILE_PATH, JSON.stringify(promoData, null, 2), 'utf8');
    return true;
  } catch (error) {
    console.error('Error actualizando mensaje de promociones:', error);
    return false;
  }
};

/**
 * Limpia sesiones antiguas de la memoria para prevenir fuga de memoria
 * (Solo en memoria, NO guarda en BD)
 */
const cleanupOldSessions = () => {
  const now = Date.now();
  let cleanedCount = 0;

  for (const [userPhone, session] of Object.entries(userSessions)) {
    // Eliminar sesiones sin actividad reciente (m√°s de 1 d√≠a / 24 horas)
    if (session.lastActivity && (now - session.lastActivity) > MAX_SESSION_AGE) {
      delete userSessions[userPhone];
      cleanedCount++;
    }
  }

  if (cleanedCount > 0) {
    console.log(`üßπ Limpieza autom√°tica: ${cleanedCount} sesiones antiguas eliminadas de memoria`);
  }

  console.log(`üìä Sesiones activas en memoria: ${Object.keys(userSessions).length}`);
};

// Ejecutar limpieza peri√≥dica cada 24 horas
setInterval(cleanupOldSessions, CLEANUP_INTERVAL);

// Ejecutar limpieza inicial 10 segundos despu√©s de arrancar
setTimeout(cleanupOldSessions, 10000);

/**
 * Inicializa una nueva sesi√≥n para un usuario (solo en memoria)
 */
const initializeUserSession = (userPhone) => {
  userSessions[userPhone] = {
    state: 'MAIN_MENU',
    cart: [],
    selectedCategory: null,
    selectedSubcategory: null,
    categoriesList: [],
    subcategoriesList: [],
    lastActivity: Date.now()
  };

  return userSessions[userPhone];
};

/**
 * Verifica si la sesi√≥n del usuario ha expirado por inactividad
 */
const isSessionExpired = (userPhone) => {
  if (!userSessions[userPhone]) {
    return true;
  }

  const session = userSessions[userPhone];
  if (!session.lastActivity) {
    return false;
  }

  const now = Date.now();
  const timeSinceLastActivity = now - session.lastActivity;

  if (timeSinceLastActivity > INACTIVITY_TIMEOUT) {
    console.log(`‚è∞ Sesi√≥n expirada por inactividad para ${userPhone} (${Math.round(timeSinceLastActivity / 60000)} minutos)`);
    return true;
  }

  return false;
};

/**
 * Actualiza el timestamp de √∫ltima actividad del usuario (solo en memoria)
 */
const updateLastActivity = (userPhone) => {
  if (userSessions[userPhone]) {
    userSessions[userPhone].lastActivity = Date.now();
  }
};

/**
 * Cambia el estado de la sesi√≥n (solo en memoria)
 * Uso: setSessionState(userPhone, 'WITH_ADVISOR')
 */
const setSessionState = (userPhone, newState, additionalData = {}) => {
  if (!userSessions[userPhone]) {
    initializeUserSession(userPhone);
  }

  userSessions[userPhone].state = newState;

  // Aplicar datos adicionales si se proveen
  Object.assign(userSessions[userPhone], additionalData);
};

/**
 * Normaliza texto quitando tildes y caracteres especiales
 */
const normalizeText = (text) => {
  return text
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/√±/g, 'n')
    .replace(/√ë/g, 'N');
};

/**
 * Verifica si estamos dentro del horario de atenci√≥n
 * Lunes a viernes: 8:00 AM - 4:30 PM
 * S√°bados: 8:00 AM - 12:40 PM
 * Domingos: Cerrado
 * Zona horaria: Colombia (America/Bogota, UTC-5)
 *
 * ‚ö†Ô∏è TEMPORALMENTE DESHABILITADO PARA PRUEBAS ‚ö†Ô∏è
 */
const isWithinBusinessHours = () => {
  // ‚ö†Ô∏è COMENTADO TEMPORALMENTE PARA PRUEBAS - DESCOMENTAR EN PRODUCCI√ìN
  return true; // Siempre retorna true para permitir pruebas fuera de horario

  /* DESCOMENTAR ESTE BLOQUE PARA ACTIVAR VALIDACI√ìN DE HORARIO EN PRODUCCI√ìN
  // Obtener fecha y hora en zona horaria de Colombia
  const nowInColombia = new Date().toLocaleString('en-US', {
    timeZone: 'America/Bogota',
    hour12: false
  });

  const colombiaDate = new Date(nowInColombia);
  const day = colombiaDate.getDay(); // 0=Domingo, 1=Lunes, ..., 6=S√°bado
  const hour = colombiaDate.getHours();
  const minutes = colombiaDate.getMinutes();
  const currentTime = hour + minutes / 60;

  // Domingo = cerrado
  if (day === 0) {
    return false;
  }

  // Lunes a viernes: 8:00 AM - 4:30 PM
  if (day >= 1 && day <= 5) {
    return currentTime >= 8 && currentTime < 16 + 30/60; // 16:30 = 4:30 PM
  }

  // S√°bado: 8:00 AM - 12:40 PM
  if (day === 6) {
    return currentTime >= 8 && currentTime < 12 + 40/60; // 12:40 PM
  }

  return false;
  */
};

/**
 * Verifica si un usuario est√° actualmente hablando con un asesor
 * Si han pasado 24 horas, finaliza autom√°ticamente la conversaci√≥n
 */
const isUserWithAdvisor = (userPhone) => {
  if (!usersWithAdvisor.has(userPhone)) {
    return false;
  }

  const advisorSession = usersWithAdvisor.get(userPhone);
  const now = Date.now();
  const timeSinceStart = now - advisorSession.startTime;

  // Si han pasado 24 horas desde el inicio, finalizar conversaci√≥n autom√°ticamente
  if (timeSinceStart > ADVISOR_CONVERSATION_TIMEOUT) {
    console.log(`‚è∞ Conversaci√≥n con asesor expir√≥ despu√©s de 24h para ${userPhone}`);
    usersWithAdvisor.delete(userPhone);
    return false;
  }

  return true;
};

/**
 * Activa el modo asesor para un usuario
 */
const activateAdvisorMode = async (userPhone, userQuery = '') => {
  // Verificar si estamos dentro del horario de atenci√≥n
  if (!isWithinBusinessHours()) {
    const outOfHoursMessage = `‚è∞ *FUERA DE HORARIO DE ATENCI√ìN*\n\n` +
      `Lo sentimos, actualmente estamos fuera de nuestro horario de atenci√≥n para brindar asesor√≠a personalizada.\n\n` +
      `üìÖ *Nuestros horarios son:*\n` +
      `‚Ä¢ Lunes a viernes: 8:00 AM - 4:30 PM\n` +
      `‚Ä¢ S√°bados: 8:00 AM - 12:40 PM\n` +
      `‚Ä¢ Domingos: Cerrado\n\n` +
      `üí° Puedes contactarnos en nuestros horarios o seguir explorando m√°s opciones en nuestro men√∫ autom√°tico.`;

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, outOfHoursMessage, buttons);
    console.log(`‚è∞ Usuario ${userPhone} intent√≥ contactar asesor fuera de horario`);
    return;
  }

  const now = Date.now();
  const advisorSessionData = {
    startTime: now,
    lastAdvisorMessage: now,
    userQuery: userQuery,
    advisorHasResponded: false  // Inicialmente el asesor no ha respondido
  };
  usersWithAdvisor.set(userPhone, advisorSessionData);

  // Notificar al asesor con la consulta del usuario
  const advisorMessage = `üîî *NUEVA SOLICITUD DE ATENCI√ìN*\n\n` +
    `üì± Cliente: +${userPhone}\n` +
    `‚è∞ Hora: ${new Date().toLocaleString('es-CO')}\n\n` +
    `üí¨ *Consulta del cliente:*\n"${userQuery}"\n\n` +
    `Por favor responde desde el panel web o WhatsApp Business.\n\n` +
    `üìå *Para finalizar la conversaci√≥n:*\n` +
    `Escribe "/finalizar" en este chat del bot o usa el bot√≥n "Finalizar" en el panel web.`;

  try {
    await sendTextMessage(ADVISOR_PHONE, advisorMessage);
    console.log(`‚úÖ Notificaci√≥n enviada al asesor para cliente ${userPhone}`);
  } catch (error) {
    console.error('‚ùå Error notificando al asesor:', error);
  }

  // Mensaje al cliente
  const clientMessage = `‚úÖ *Solicitud enviada al asesor*\n\n` +
    `Hemos recibido tu consulta:\n"${userQuery}"\n\n` +
    `‚è±Ô∏è *Un asesor se contactar√° contigo pronto.*\n` +
    `Estate pendiente de la respuesta.\n\n` +
    `üí° Si no quieres esperar, puedes volver al men√∫ autom√°tico:`;

  const buttons = [
    { id: 'volver_menu', title: 'üè† Volver al men√∫' }
  ];

  await sendInteractiveButtons(userPhone, clientMessage, buttons);
  console.log(`üë§ Usuario ${userPhone} ahora est√° en modo asesor con consulta: "${userQuery}"`);

  // CREAR conversaci√≥n en el panel con la consulta inicial
  conversationService.addMessage(userPhone, {
    from: 'client',
    text: userQuery,
    type: 'text'
  });
  console.log(`üíæ Conversaci√≥n creada en panel para ${userPhone} con consulta inicial`);

  // Cambiar estado de la sesi√≥n para que no procese m√°s mensajes como nueva consulta
  if (userSessions[userPhone]) {
    userSessions[userPhone].state = 'WITH_ADVISOR';
    userSessions[userPhone].advisorSession = advisorSessionData;
  }

  // IMPORTANTE: Emitir evento WebSocket adicional para habilitar textarea en el panel
  // El mensaje de confirmaci√≥n anterior no incluye isWithAdvisor, as√≠ que lo enviamos ahora
  const io = global.io;
  if (io) {
    io.emit('advisor_mode_activated', {
      phoneNumber: userPhone,
      isWithAdvisor: true
    });
  }
};

/**
 * Desactiva el modo asesor para un usuario
 */
const deactivateAdvisorMode = async (userPhone) => {
  if (usersWithAdvisor.has(userPhone)) {
    usersWithAdvisor.delete(userPhone);

    // Actualizar sesi√≥n en memoria y BD
    if (userSessions[userPhone]) {
      delete userSessions[userPhone].advisorSession;
      if (userSessions[userPhone].state === 'WITH_ADVISOR') {
        userSessions[userPhone].state = 'MAIN_MENU';
      }
      
    }

    console.log(`ü§ñ Bot reactivado para ${userPhone}`);
    return true;
  }
  return false;
};

/**
 * Marca que el asesor ha respondido a un usuario
 * Se llama desde el panel cuando el asesor env√≠a un mensaje
 */
const markAdvisorResponse = (userPhone) => {
  if (usersWithAdvisor.has(userPhone)) {
    const session = usersWithAdvisor.get(userPhone);
    session.advisorHasResponded = true;
    session.lastAdvisorMessage = Date.now();
    usersWithAdvisor.set(userPhone, session);
    console.log(`‚úÖ Marcado que asesor respondi√≥ a ${userPhone}`);
    return true;
  }
  return false;
};

/**
 * Finaliza la conversaci√≥n desde el lado del asesor
 * Si hay 1 cliente: cierra directamente
 * Si hay varios: muestra men√∫ para elegir
 * Si no hay ninguno: notifica
 */
const finalizeAdvisorConversation = async (advisorPhone) => {
  console.log(`üîç Buscando conversaciones activas para asesor ${advisorPhone}...`);
  
  // Obtener todos los clientes activos con asesor
  const activeClients = Array.from(usersWithAdvisor.entries());
  
  if (activeClients.length === 0) {
    // No hay clientes activos
    await sendTextMessage(
      advisorPhone,
      `‚ö†Ô∏è *No hay conversaciones activas*\n\n` +
      `No se encontr√≥ ning√∫n cliente en conversaci√≥n con asesor en este momento.`
    );
    return false;
  }
  
  if (activeClients.length === 1) {
    // Solo 1 cliente: cerrar directamente
    const [clientPhone, clientData] = activeClients[0];
    await closeClientConversation(clientPhone, advisorPhone);
    return true;
  }
  
  // M√∫ltiples clientes: mostrar men√∫ para elegir
  await showClientSelectionMenu(advisorPhone, activeClients);
  return true;
};

/**
 * Muestra un men√∫ interactivo con los clientes activos para que el asesor elija cu√°l cerrar
 */
const showClientSelectionMenu = async (advisorPhone, activeClients) => {
  console.log(`üìã Mostrando men√∫ de selecci√≥n con ${activeClients.length} clientes activos`);
  
  // Crear botones (m√°ximo 3 por limitaci√≥n de WhatsApp)
  if (activeClients.length <= 3) {
    // Usar botones interactivos
    const buttons = activeClients.map(([clientPhone, clientData], index) => {
      const timeAgo = Math.floor((Date.now() - clientData.startTime) / 60000); // minutos
      return {
        id: `finalizar_${clientPhone}`,
        title: `Cliente ${index + 1} (${timeAgo}m)`
      };
    });
    
    let bodyText = `üîö *Selecciona qu√© conversaci√≥n finalizar:*\n\n`;
    activeClients.forEach(([clientPhone, clientData], index) => {
      const timeAgo = Math.floor((Date.now() - clientData.startTime) / 60000);
      const query = clientData.userQuery || 'Sin consulta';
      const shortQuery = query.length > 30 ? query.substring(0, 30) + '...' : query;
      bodyText += `${index + 1}. +${clientPhone}\n`;
      bodyText += `   ‚è±Ô∏è Hace ${timeAgo} min\n`;
      bodyText += `   üí¨ "${shortQuery}"\n\n`;
    });
    
    await sendInteractiveButtons(advisorPhone, bodyText, buttons);
    
  } else if (activeClients.length <= 10) {
    // Entre 4 y 10 clientes: usar lista interactiva
    const rows = activeClients.map(([clientPhone, clientData], index) => {
      const timeAgo = Math.floor((Date.now() - clientData.startTime) / 60000);
      const query = clientData.userQuery || 'Sin consulta';
      const shortQuery = query.length > 20 ? query.substring(0, 20) + '...' : query;
      
      return {
        id: `finalizar_${clientPhone}`,
        title: `+${clientPhone}`,
        description: `Hace ${timeAgo}m: ${shortQuery}`
      };
    });
    
    const sections = [{
      title: 'Conversaciones activas',
      rows: rows
    }];
    
    await sendInteractiveList(
      advisorPhone,
      `üîö *Tienes ${activeClients.length} conversaciones activas*\n\nSelecciona cu√°l deseas finalizar:`,
      'Ver conversaciones',
      sections
    );
  } else {
    // M√°s de 10 clientes: usar mensaje de texto con n√∫meros
    let message = `üîö *Tienes ${activeClients.length} conversaciones activas*\n\n`;
    message += `Escribe el *n√∫mero* del cliente que deseas finalizar:\n\n`;
    
    activeClients.forEach(([clientPhone, clientData], index) => {
      const timeAgo = Math.floor((Date.now() - clientData.startTime) / 60000);
      const query = clientData.userQuery || 'Sin consulta';
      const shortQuery = query.length > 40 ? query.substring(0, 40) + '...' : query;
      
      message += `*${index + 1}.* +${clientPhone}\n`;
      message += `   ‚è±Ô∏è Hace ${timeAgo} min\n`;
      message += `   üí¨ "${shortQuery}"\n\n`;
    });
    
    message += `_Ejemplo: Escribe *1* para finalizar la primera conversaci√≥n_`;
    
    await sendTextMessage(advisorPhone, message);
    
    // Guardar el estado para procesar la respuesta num√©rica
    if (!userSessions[advisorPhone]) {
      userSessions[advisorPhone] = {};
    }
    userSessions[advisorPhone].state = 'SELECTING_CLIENT_TO_FINALIZE';
    userSessions[advisorPhone].clientList = activeClients;
    
  }
};

/**
 * Cierra la conversaci√≥n con un cliente espec√≠fico
 */
const closeClientConversation = async (clientPhone, advisorPhone) => {
  console.log(`‚úÖ Finalizando conversaci√≥n con cliente ${clientPhone}`);
  
  // Desactivar modo asesor para ese cliente
  deactivateAdvisorMode(clientPhone);
  
  // Notificar al cliente que la conversaci√≥n finaliz√≥
  const mensaje = `‚úÖ *Conversaci√≥n finalizada*\n\n` +
    `El asesor ha finalizado la atenci√≥n.\n\n` +
    `Gracias por contactarnos. Si necesitas m√°s ayuda:`;

  const buttons = [
    { id: 'volver_menu', title: 'üè† Volver al men√∫' }
  ];

  await sendInteractiveButtons(clientPhone, mensaje, buttons);
  
  // NO mostramos el men√∫ autom√°ticamente, esperamos a que el cliente presione el bot√≥n
  
  // Confirmar al asesor
  await sendTextMessage(
    advisorPhone,
    `‚úÖ *Conversaci√≥n finalizada correctamente*\n\n` +
    `Cliente: +${clientPhone}\n` +
    `El bot ha sido reactivado para este cliente.`
  );
};

/**
 * Maneja la selecci√≥n del men√∫ seg√∫n el mensaje del usuario
 */
const handleMenuSelection = async (userPhone, message) => {
  // VALIDACIONES DE SEGURIDAD
  try {
    // Validar que userPhone existe y es string
    if (!userPhone || typeof userPhone !== 'string') {
      console.error('‚ùå userPhone inv√°lido:', userPhone);
      return;
    }

    // Validar que message existe
    if (message === null || message === undefined) {
      console.error('‚ùå mensaje null/undefined de:', userPhone);
      return;
    }

    // Convertir message a string si no lo es
    message = String(message);

    // Limitar longitud del mensaje para prevenir ataques
    const MAX_MESSAGE_LENGTH = 10000;
    if (message.length > MAX_MESSAGE_LENGTH) {
      console.warn(`‚ö†Ô∏è Mensaje muy largo (${message.length} chars) de ${userPhone} - Truncando`);
      message = message.substring(0, MAX_MESSAGE_LENGTH);
    }

    const messageText = message.toLowerCase().trim();

    // Verificar si est√° en modo asesor para guardar en panel
    const userState = userSessions[userPhone]?.state || 'UNKNOWN';
    const isWithAdvisorMap = isUserWithAdvisor(userPhone);
    const isInAdvisorMode = isWithAdvisorMap ||
                           userState === 'WAITING_ADVISOR_QUERY' ||
                           userState === 'WITH_ADVISOR';

    // SOLO registrar mensaje del cliente en el panel SI est√° con asesor
    if (userPhone !== ADVISOR_PHONE && isInAdvisorMode) {
      conversationService.addMessage(userPhone, {
        from: 'client',
        text: message,
        type: 'text'
      });

      // Notificar al panel mediante WebSocket
      const io = global.io;
      if (io) {
        io.emit('new_message', {
          phoneNumber: userPhone,
          message: {
            from: 'client',
            text: message,
            timestamp: new Date()
          },
          userState: userState,
          messageId: message,
          isWithAdvisor: isInAdvisorMode
        });
      }
    }

  // COMANDO /FINALIZAR DESDE EL ASESOR
  if (messageText === '/finalizar' && userPhone === ADVISOR_PHONE) {
    console.log(`üîö Comando /finalizar recibido del asesor`);
    await finalizeAdvisorConversation(userPhone);
    return;
  }

  // SELECCI√ìN NUM√âRICA DE CLIENTE (cuando hay m√°s de 10 clientes)
  if (userPhone === ADVISOR_PHONE && 
      userSessions[userPhone]?.state === 'SELECTING_CLIENT_TO_FINALIZE') {
    const selectedNumber = parseInt(messageText);
    const clientList = userSessions[userPhone].clientList;
    
    if (isNaN(selectedNumber) || selectedNumber < 1 || selectedNumber > clientList.length) {
      await sendTextMessage(
        userPhone,
        `‚ùå *N√∫mero inv√°lido*\n\nPor favor escribe un n√∫mero entre 1 y ${clientList.length}`
      );
      return;
    }
    
    // Obtener el cliente seleccionado (√≠ndice empieza en 0)
    const [clientPhone, clientData] = clientList[selectedNumber - 1];
    console.log(`üîö Asesor seleccion√≥ finalizar conversaci√≥n con ${clientPhone} (opci√≥n ${selectedNumber})`);
    
    // Limpiar el estado
    delete userSessions[userPhone].state;
    delete userSessions[userPhone].clientList;
    
    
    // Verificar que el cliente todav√≠a est√° activo
    if (usersWithAdvisor.has(clientPhone)) {
      await closeClientConversation(clientPhone, userPhone);
    } else {
      await sendTextMessage(
        userPhone,
        `‚ùå *Error*\n\nEse cliente ya no est√° en conversaci√≥n activa.`
      );
    }
    return;
  }

  // SELECCI√ìN DE CLIENTE PARA FINALIZAR (desde men√∫ interactivo)
  if (userPhone === ADVISOR_PHONE && messageText.startsWith('finalizar_')) {
    const clientPhone = messageText.replace('finalizar_', '');
    console.log(`üîö Asesor seleccion√≥ finalizar conversaci√≥n con ${clientPhone}`);
    
    // Verificar que el cliente est√° realmente en conversaci√≥n con asesor
    if (usersWithAdvisor.has(clientPhone)) {
      await closeClientConversation(clientPhone, userPhone);
    } else {
      await sendTextMessage(
        userPhone,
        `‚ùå *Error*\n\nEse cliente ya no est√° en conversaci√≥n activa.`
      );
    }
    return;
  }

  // COMANDO ESPECIAL: /comandos (solo asesor)
  if (messageText === '/comandos' && userPhone === ADVISOR_PHONE) {
    const comandosMsg = `ü§ñ *COMANDOS DE ADMINISTRADOR*\n\n` +
      `Estos son los comandos especiales disponibles:\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `ÔøΩ *Finalizar conversaciones*\n` +
      `   Finaliza conversaciones activas con clientes\n` +
      `   üìù Tambi√©n puedes escribir: */finalizar*\n` +
      `   ‚Ä¢ 1 sesi√≥n: Finaliza autom√°ticamente\n` +
      `   ‚Ä¢ 2-3 sesiones: Muestra botones\n` +
      `   ‚Ä¢ 4-10 sesiones: Muestra lista\n` +
      `   ‚Ä¢ +10 sesiones: Selecci√≥n num√©rica\n\n` +
      `üî• *Actualizar promociones*\n` +
      `   Actualiza el mensaje de promociones\n` +
      `   üìù Tambi√©n puedes escribir: */actualizar_promo*\n` +
      `   El bot te pedir√° el nuevo texto\n` +
      `   üìè L√≠mite: 4000 caracteres\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üí° *Selecciona un comando o escr√≠belo:*`;
    
    await sendInteractiveButtons(
      userPhone,
      comandosMsg,
      [
        { id: 'cmd_finalizar', title: 'üîö Finalizar' },
        { id: 'cmd_promo', title: 'üî• Actualizar Promo' }
      ],
      'Comandos Admin'
    );
    return;
  }

  // BOTONES DEL MEN√ö DE COMANDOS (solo asesor)
  if (userPhone === ADVISOR_PHONE && messageText === 'cmd_finalizar') {
    console.log(`üîö Asesor presion√≥ bot√≥n de /finalizar`);
    await finalizeAdvisorConversation(userPhone);
    return;
  }

  if (userPhone === ADVISOR_PHONE && messageText === 'cmd_promo') {
    console.log(`üî• Asesor presion√≥ bot√≥n de /actualizar_promo`);
    // Inicializar sesi√≥n si no existe
    if (!userSessions[userPhone]) {
      await initializeUserSession(userPhone);
    }

    // Cambiar estado para esperar el nuevo mensaje de promoci√≥n
    userSessions[userPhone].state = 'UPDATING_PROMO';
    
    await sendTextMessage(
      userPhone,
      `üìù *ACTUALIZAR MENSAJE DE PROMOCIONES*\n\n` +
      `Por favor, escribe el *nuevo mensaje* que aparecer√° en la opci√≥n "Promociones y Descuentos".\n\n` +
      `üí° *Puedes usar formato:*\n` +
      `‚Ä¢ *Negritas* con asteriscos\n` +
      `‚Ä¢ _Cursivas_ con guiones bajos\n` +
      `‚Ä¢ Emojis üî•üòéüéâ\n` +
      `‚Ä¢ Saltos de l√≠nea para organizar\n\n` +
      `üìè *L√≠mite:* M√°ximo 4000 caracteres\n\n` +
      `Escribe tu mensaje ahora:`
    );
    return;
  }

  // COMANDO ESPECIAL: /actualizar_promo (solo asesor)
  if (messageText.startsWith('/actualizar_promo')) {
    // Verificar que sea el asesor
    if (userPhone !== ADVISOR_PHONE) {
      await sendTextMessage(userPhone, '‚ùå Este comando solo est√° disponible para el administrador.');
      return;
    }

    // Inicializar sesi√≥n si no existe
    if (!userSessions[userPhone]) {
      await initializeUserSession(userPhone);
    }

    // Cambiar estado para esperar el nuevo mensaje de promoci√≥n
    userSessions[userPhone].state = 'UPDATING_PROMO';
    
    await sendTextMessage(
      userPhone,
      `üìù *ACTUALIZAR MENSAJE DE PROMOCIONES*\n\n` +
      `Por favor, escribe el *nuevo mensaje* que aparecer√° en la opci√≥n "Promociones y Descuentos".\n\n` +
      `üí° *Puedes usar formato:*\n` +
      `‚Ä¢ *Negritas* con asteriscos\n` +
      `‚Ä¢ _Cursivas_ con guiones bajos\n` +
      `‚Ä¢ Emojis üî•üòéüéâ\n` +
      `‚Ä¢ Saltos de l√≠nea para organizar\n\n` +
      `üìè *L√≠mite:* M√°ximo 4000 caracteres\n\n` +
      `Escribe tu mensaje ahora:`
    );
    return;
  }

  // BOTONES DEL MEN√ö PRINCIPAL (respuestas interactivas)
  // Manejar bot√≥n "Volver al men√∫"
  if (messageText === 'volver_menu') {
    await showMainMenu(userPhone);
    return;
  }

  // Manejar bot√≥n "Repetir correo"
  if (messageText === 'repetir_correo') {
    userSessions[userPhone].state = 'WAITING_EMAIL_FOR_ORDERS';
    await sendTextMessage(
      userPhone,
      'üìß *Por favor, ingresa tu correo electr√≥nico*\n\n' +
      'Escribe el correo que usaste al hacer tu compra:'
    );

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
    return;
  }

  // Manejar botones del men√∫ de asesor
  if (messageText === 'asesor_varios') {
    // Flujo actual: pedir consulta general
    userSessions[userPhone].state = 'WAITING_ADVISOR_QUERY';
    await sendTextMessage(
      userPhone,
      `¬°Perfecto! üë®‚Äçüíº\n\n` +
      `*¬øHas elegido hablar con un asesor?*\n\n` +
      `Cu√©ntanos aqu√≠ tu problema o consulta, y un asesor se contactar√° contigo *en breve* para ayudarte. üòä\n\n` +
      `üí¨ _Escribe tu consulta ahora:_`
    );

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
    return;
  }

  if (messageText === 'asesor_cotizar') {
    // Nuevo flujo: pedir datos para cotizaci√≥n
    userSessions[userPhone].state = 'WAITING_QUOTE_DATA_FOR_ADVISOR';
    await sendTextMessage(
      userPhone,
      `¬°Perfecto! üöó *Para ayudarte a cotizar, por favor comp√°rteme los siguientes datos:*\n\n` +
      `‚úî Marca del veh√≠culo (Hyundai, Kia, Chevrolet, Renault, etc.)\n` +
      `‚úî Modelo o l√≠nea (por ejemplo, Accent, Sail, Logan‚Ä¶)\n` +
      `‚úî A√±o o cilindraje del veh√≠culo.\n` +
      `‚úî Nombre del repuesto que necesitas (ej: radiador, r√≥tula, correa, etc.)\n` +
      `‚úî Si tienes la referencia original o una foto, ¬°env√≠ala aqu√≠! üì∏\n\n` +
      `üí¨ _Escribe toda la informaci√≥n ahora:_`
    );

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
    return;
  }

  // Manejar botones interactivos del men√∫ principal
  if (messageText.startsWith('menu_')) {
    const menuOption = messageText.replace('menu_', '');

    if (menuOption === 'cotizar') {
      await startQuoteFlow(userPhone);
      return;
    } else if (menuOption === 'catalogo') {
      await showCategories(userPhone);
      return;
    } else if (menuOption === 'asesor') {
      // Verificar horario de atenci√≥n ANTES de mostrar el men√∫
      if (!isWithinBusinessHours()) {
        const outOfHoursMessage = `‚è∞ *FUERA DE HORARIO DE ATENCI√ìN*\n\n` +
          `Lo sentimos, actualmente estamos fuera de nuestro horario de atenci√≥n para brindar asesor√≠a personalizada.\n\n` +
          `üìÖ *Nuestros horarios son:*\n` +
          `‚Ä¢ Lunes a viernes: 8:00 AM - 4:30 PM\n` +
          `‚Ä¢ S√°bados: 8:00 AM - 12:40 PM\n` +
          `‚Ä¢ Domingos: Cerrado\n\n` +
          `üí° Puedes contactarnos en nuestros horarios o seguir explorando m√°s opciones en nuestro men√∫ autom√°tico.`;

        const buttons = [
          { id: 'volver_menu', title: 'üè† Volver al men√∫' }
        ];

        await sendInteractiveButtons(userPhone, outOfHoursMessage, buttons);
        console.log(`‚è∞ Usuario ${userPhone} intent√≥ contactar asesor fuera de horario`);
        return;
      }

      // Mostrar men√∫ de opciones de asesor
      userSessions[userPhone].state = 'ADVISOR_MENU';

      const mensaje = `¬°Hola! üëã Estoy aqu√≠ para ayudarte üòä\n\n` +
        `*¬øC√≥mo te gustar√≠a que te asista hoy?*\n\n` +
        `Selecciona una opci√≥n y con gusto te atender√©:`;

      const buttons = [
        { id: 'asesor_cotizar', title: 'üîç Cotizar autoparte' },
        { id: 'asesor_varios', title: 'üí¨ Atenci√≥n general' },
        { id: 'volver_menu', title: 'üè† Volver al men√∫' }
      ];

      await sendInteractiveButtons(userPhone, mensaje, buttons);
      return;
    } else if (menuOption === 'horarios') {
      userSessions[userPhone].state = 'VIEWING_INFO';
      const mensaje = `üïí *HORARIOS DE ATENCI√ìN*\n\n` +
        `Lunes a Viernes: 8:00 AM - 4:30 PM\n` +
        `S√°bados: 8:00 AM - 12:40 PM\n` +
        `Domingos: Cerrado`;
      const buttons = [
        { id: 'volver_menu', title: 'üè† Volver al men√∫' }
      ];
      await sendInteractiveButtons(userPhone, mensaje, buttons);
      return;
    } else if (menuOption === 'garantias') {
      userSessions[userPhone].state = 'VIEWING_INFO';
      const mensaje = `üõ°Ô∏è *GARANT√çAS Y DEVOLUCIONES*\n\n` +
        `üßæ *Todos nuestros productos cuentan con garant√≠a de 3 meses*, excepto la l√≠nea de el√©ctricos originales.\n\n` +
        `‚ö†Ô∏è *Importante:* Los productos el√©ctricos originales tienen garant√≠a *solo si presentan fallas de f√°brica en el momento de la instalaci√≥n*.\n\n` +
        `Despu√©s de instalados y en funcionamiento, no aplica garant√≠a por da√±os causados por mal uso, voltajes incorrectos u otras manipulaciones.\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `Si presentas alg√∫n inconveniente con tu repuesto, escr√≠benos con:\n\n` +
        `‚úî N√∫mero de pedido\n` +
        `‚úî Nombre del producto\n` +
        `‚úî Breve descripci√≥n del caso\n\n` +
        `Nuestro equipo revisar√° tu solicitud y te responder√° lo antes posible.`;
      const buttons = [
        { id: 'volver_menu', title: 'üè† Volver al men√∫' }
      ];
      await sendInteractiveButtons(userPhone, mensaje, buttons);
      return;
    } else if (menuOption === 'envios') {
      userSessions[userPhone].state = 'VIEWING_INFO';
      const mensaje = `üìÆ *INFORMACI√ìN SOBRE TIEMPOS DE ENV√çO Y PAGOS*\n\n` +
        `üìÆ Realizamos env√≠os a todo Colombia.\n\n` +
        `üöö *Tiempo estimado:* 1 a 3 d√≠as h√°biles\n\n` +
        `üí≥ *M√©todos de pago:* Wompi, Addi, transferencia, contra entrega (seg√∫n zona)\n\n` +
        `üì¶ Empacamos con cuidado para garantizar que tus repuestos lleguen en perfecto estado.`;
      const buttons = [
        { id: 'volver_menu', title: 'üè† Volver al men√∫' }
      ];
      await sendInteractiveButtons(userPhone, mensaje, buttons);
      return;
    } else if (menuOption === 'puntos') {
      userSessions[userPhone].state = 'VIEWING_INFO';
      const mensaje = `üìç *PUNTOS DE ENTREGA O RECOGIDA LOCAL*\n\n` +
        `üì¶ Puedes recoger tu pedido en nuestra sede o coordinar contra entrega (seg√∫n zona)\n\n` +
        `üìç *Direcci√≥n:* CR 50A # 46 ‚Äì 48, Piso 3. Itag√º√≠ (Antioquia)\n\n` +
        `üìû *Tel√©fono:* 316 483 6166\n\n` +
        `üïì *Horario:*\n` +
        `Lunes a viernes 8:00 a.m. ‚Äì 4:30 p.m.\n` +
        `S√°bados 8:00 a.m. ‚Äì 12:40 p.m.\n\n` +
        `üìå Ver en Google Maps:\n` +
        `https://www.google.com/maps/search/?api=1&query=CR+50A+%23+46-48+Itag√º√≠+Antioquia`;
      const buttons = [
        { id: 'volver_menu', title: 'üè† Volver al men√∫' }
      ];
      await sendInteractiveButtons(userPhone, mensaje, buttons);
      return;
    } else if (menuOption === 'promociones') {
      userSessions[userPhone].state = 'VIEWING_INFO';
      const mensaje = getPromoMessage();
      await sendTextMessage(userPhone, mensaje);
      const buttonMessage = 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä';
      const buttons = [
        { id: 'volver_menu', title: 'üè† Volver al men√∫' }
      ];
      await sendInteractiveButtons(userPhone, buttonMessage, buttons);
      return;
    } else if (menuOption === 'pedidos') {
      userSessions[userPhone].state = 'WAITING_EMAIL_FOR_ORDERS';
      await sendTextMessage(
        userPhone,
        `¬°Perfecto! üéØ\n\n` +
        `üì¶ *¬øQuieres consultar tu pedido?*\n\n` +
        `Por favor, escr√≠beme el üìß *correo electr√≥nico* con el que hiciste tu compra y te mostrar√© toda la informaci√≥n de tu pedido. üòä\n\n` +
        `‚úçÔ∏è _Escribe tu correo aqu√≠:_`
      );

      const buttons = [
        { id: 'volver_menu', title: 'üè† Volver al men√∫' }
      ];

      await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
      return;
    }
  }

  // VERIFICAR SI ESTABA CON ASESOR PERO EXPIR√ì (24 horas)
  if (usersWithAdvisor.has(userPhone)) {
    const advisorSession = usersWithAdvisor.get(userPhone);
    const timeSinceStart = Date.now() - advisorSession.startTime;
    
    if (timeSinceStart > ADVISOR_CONVERSATION_TIMEOUT) {
      // Conversaci√≥n expir√≥ - cierre silencioso (sin mensaje)
      console.log(`‚è∞ Conversaci√≥n con asesor expir√≥ (24h) para ${userPhone} - Cierre silencioso`);
      usersWithAdvisor.delete(userPhone);
      
      // Simplemente mostrar el men√∫ normalmente (experiencia fluida)
      await showMainMenu(userPhone);
      return;
    }
  }

  // SI EL USUARIO EST√Å CON UN ASESOR (y NO ha expirado)
  if (isUserWithAdvisor(userPhone)) {
    // Actualizar actividad
    updateLastActivity(userPhone);

    // Obtener sesi√≥n del asesor para verificar si ya respondi√≥
    const advisorSession = usersWithAdvisor.get(userPhone);

    // Solo enviar recordatorio si el asesor NO ha respondido a√∫n
    if (!advisorSession.advisorHasResponded) {
      await sendTextMessage(
        userPhone,
        `‚è≥ *En conversaci√≥n con asesor*\n\n` +
        `Tu consulta fue enviada. El asesor te responder√° pronto.\n\n` +
        `üí¨ Puedes seguir escribiendo y el asesor ver√° tus mensajes.`
      );
      console.log(`üë§ Mensaje de ${userPhone} recibido - esperando respuesta del asesor`);
    } else {
      // El asesor ya respondi√≥, solo registrar el mensaje sin enviar recordatorio
      console.log(`üë§ Mensaje de ${userPhone} recibido - conversaci√≥n activa con asesor`);
    }

    return;
  }

  // VERIFICAR SI LA SESI√ìN EXPIR√ì POR INACTIVIDAD (solo si NO est√° con asesor)
  if (isSessionExpired(userPhone)) {
    console.log(`üîÑ Sesi√≥n expirada para ${userPhone}. Mostrando men√∫ principal...`);
    // Limpiar modo asesor si estaba activo
    deactivateAdvisorMode(userPhone);
    // Notificar al usuario que su sesi√≥n expir√≥
    await sendTextMessage(
      userPhone,
      `‚è±Ô∏è *Tu sesi√≥n ha expirado*\n\n` +
      `Por inactividad, hemos reiniciado la conversaci√≥n.\n\n` +
      `A continuaci√≥n, ver√°s el men√∫ principal. üëá`
    );
    // Mostrar men√∫ de bienvenida
    await showMainMenu(userPhone);
    return;
  }

  // Actualizar timestamp de √∫ltima actividad
  updateLastActivity(userPhone);

  // Inicializar sesi√≥n si no existe
  if (!userSessions[userPhone]) {
    await initializeUserSession(userPhone);
  }

  const session = userSessions[userPhone];

  try {
    // Navegaci√≥n seg√∫n el estado de la sesi√≥n
    switch (session.state) {
      case 'MAIN_MENU':
        await handleMainMenuSelection(userPhone, messageText);
        break;
      
      case 'WAITING_ADVISOR_QUERY':
        // El usuario escribi√≥ su consulta, ahora activar modo asesor con esa consulta
        await activateAdvisorMode(userPhone, message);
        break;

      case 'WAITING_QUOTE_DATA_FOR_ADVISOR':
        // El usuario proporcion√≥ los datos de cotizaci√≥n
        await sendTextMessage(
          userPhone,
          `¬°Gracias por la informaci√≥n! üöó\n\n` +
          `Un asesor estar√° contigo en breve.`
        );
        // Activar modo asesor con los datos de cotizaci√≥n
        await activateAdvisorMode(userPhone, message);
        break;

      case 'WAITING_EMAIL_FOR_ORDERS':
        // El usuario escribi√≥ su email para consultar pedidos
        await handleOrdersEmailInput(userPhone, message);
        break;
      
      case 'VIEWING_ORDER_DETAILS':
        // El usuario seleccion√≥ un pedido para ver detalles
        await handleOrderSelection(userPhone, messageText);
        break;
      
      case 'UPDATING_PROMO':
        // El asesor est√° actualizando el mensaje de promociones
        // Validar longitud del mensaje (l√≠mite de WhatsApp: 4096, dejamos margen)
        if (message.length > 4000) {
          await sendTextMessage(
            userPhone,
            `‚ùå *Mensaje demasiado largo*\n\n` +
            `Tu mensaje tiene *${message.length} caracteres*.\n` +
            `El l√≠mite es *4000 caracteres*.\n\n` +
            `Por favor, acorta el mensaje e intenta nuevamente con /actualizar_promo`
          );
          userSessions[userPhone].state = 'MAIN_MENU';
          break;
        }

        const success = updatePromoMessage(message, userPhone);
        if (success) {
          await sendTextMessage(
            userPhone,
            `‚úÖ *Mensaje de promociones actualizado correctamente*\n\n` +
            `El nuevo mensaje ya est√° disponible para todos los usuarios.\n\n` +
            `üìä Longitud: ${message.length} caracteres\n\n` +
            `Vista previa:\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n${message}`
          );
        } else {
          await sendTextMessage(
            userPhone,
            `‚ùå Error al actualizar el mensaje.\n\nIntenta de nuevo con /actualizar_promo`
          );
        }
        // Limpiar estado del asesor sin mostrar men√∫
        userSessions[userPhone].state = 'MAIN_MENU';
        break;
      
      case 'WITH_ADVISOR':
        // El usuario ya est√° con asesor, este caso ya se maneja arriba
        // No deber√≠a llegar aqu√≠ porque isUserWithAdvisor() ya lo captura
        console.log(`‚ö†Ô∏è Usuario ${userPhone} en estado WITH_ADVISOR pero no est√° en usersWithAdvisor`);
        await showMainMenu(userPhone);
        break;
      
      case 'CATEGORY_LIST':
        await handleCategorySelection(userPhone, messageText);
        break;
      
      case 'SUBCATEGORY_LIST':
        await handleSubcategorySelection(userPhone, messageText);
        break;

      case 'PRODUCT_LIST':
        // Usuario est√° viendo lista de productos y puede seleccionar por n√∫mero
        const catalogProductIndex = parseInt(messageText);
        if (!isNaN(catalogProductIndex) && catalogProductIndex > 0) {
          await showProductDetails(userPhone, catalogProductIndex);
        } else {
          await sendTextMessage(
            userPhone,
            `‚ùå Por favor escribe el n√∫mero del producto que deseas ver.\n\n` +
            `Ejemplo: escribe *5* para ver los detalles del producto #5`
          );
        }
        break;

      case 'QUOTE_SELECT_BRAND':
        // Usuario seleccion√≥ una marca de veh√≠culo (por n√∫mero)
        const brandIndex = parseInt(messageText);
        if (!isNaN(brandIndex) && brandIndex > 0 && userSessions[userPhone].carBrandsList) {
          const selectedBrand = userSessions[userPhone].carBrandsList[brandIndex - 1];
          if (selectedBrand) {
            // Mostrar modelos de la marca seleccionada
            await showCarModels(userPhone, selectedBrand.id);
          } else {
            await sendTextMessage(userPhone, '‚ùå N√∫mero inv√°lido. Por favor elige un n√∫mero de la lista.');
            const buttons = [
              { id: 'menu_cotizar', title: 'üîç Nueva b√∫squeda' },
              { id: 'volver_menu', title: 'üè† Volver al men√∫' }
            ];
            await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
          }
        } else {
          await sendTextMessage(userPhone, '‚ùå Por favor responde con el n√∫mero de la marca que deseas.');
          const buttons = [
            { id: 'menu_cotizar', title: 'üîç Nueva b√∫squeda' },
            { id: 'volver_menu', title: 'üè† Volver al men√∫' }
          ];
          await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
        }
        break;
      
      case 'QUOTE_SELECT_MODEL':
        // Usuario seleccion√≥ un modelo de veh√≠culo (por n√∫mero)
        const modelIndex = parseInt(messageText);
        if (!isNaN(modelIndex) && modelIndex > 0 && userSessions[userPhone].carModelsList) {
          const selectedModel = userSessions[userPhone].carModelsList[modelIndex - 1];
          if (selectedModel) {
            userSessions[userPhone].quoteFilters.model = selectedModel.id;
            await showQuoteCategories(userPhone);
          } else {
            await sendTextMessage(userPhone, '‚ùå N√∫mero inv√°lido. Por favor elige un n√∫mero de la lista.');
            const buttons = [
              { id: 'menu_cotizar', title: 'üîç Nueva b√∫squeda' },
              { id: 'volver_menu', title: 'üè† Volver al men√∫' }
            ];
            await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
          }
        } else {
          await sendTextMessage(userPhone, '‚ùå Por favor responde con el n√∫mero del modelo que deseas.');
          const buttons = [
            { id: 'menu_cotizar', title: 'üîç Nueva b√∫squeda' },
            { id: 'volver_menu', title: 'üè† Volver al men√∫' }
          ];
          await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
        }
        break;

      case 'QUOTE_SELECT_CATEGORY':
        // Usuario seleccion√≥ una categor√≠a de producto (por n√∫mero)
        const categoryIndex = parseInt(messageText);
        if (!isNaN(categoryIndex) && categoryIndex > 0 && userSessions[userPhone].quoteCategoriesList) {
          const selectedCategory = userSessions[userPhone].quoteCategoriesList[categoryIndex - 1];
          if (selectedCategory) {
            userSessions[userPhone].quoteCategoryName = selectedCategory.name;
            await showQuoteSubcategories(userPhone, selectedCategory.id, selectedCategory.name);
          } else {
            await sendTextMessage(userPhone, '‚ùå N√∫mero inv√°lido. Por favor elige un n√∫mero de la lista.');
            const buttons = [
              { id: 'menu_cotizar', title: 'üîç Nueva b√∫squeda' },
              { id: 'volver_menu', title: 'üè† Volver al men√∫' }
            ];
            await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
          }
        } else {
          await sendTextMessage(userPhone, '‚ùå Por favor responde con el n√∫mero de la categor√≠a que necesitas.');
          const buttons = [
            { id: 'menu_cotizar', title: 'üîç Nueva b√∫squeda' },
            { id: 'volver_menu', title: 'üè† Volver al men√∫' }
          ];
          await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
        }
        break;

      case 'QUOTE_SELECT_SUBCATEGORY':
        // Usuario seleccion√≥ una subcategor√≠a o decidi√≥ omitirla (por n√∫mero)
        const subcategoryIndex = parseInt(messageText);
        if (subcategoryIndex === 0) {
          // Omitir subcategor√≠a
          await searchQuoteProducts(userPhone);
        } else if (!isNaN(subcategoryIndex) && subcategoryIndex > 0 && userSessions[userPhone].quoteSubcategoriesList) {
          const selectedSubcategory = userSessions[userPhone].quoteSubcategoriesList[subcategoryIndex - 1];
          if (selectedSubcategory) {
            userSessions[userPhone].quoteFilters.subcategory = selectedSubcategory.id;
            await searchQuoteProducts(userPhone);
          } else {
            await sendTextMessage(userPhone, '‚ùå N√∫mero inv√°lido. Por favor elige un n√∫mero de la lista o 0 para omitir.');
            const buttons = [
              { id: 'menu_cotizar', title: 'üîç Nueva b√∫squeda' },
              { id: 'volver_menu', title: 'üè† Volver al men√∫' }
            ];
            await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
          }
        } else {
          await sendTextMessage(userPhone, '‚ùå Por favor responde con el n√∫mero de la subcategor√≠a o 0 para omitir.');
          const buttons = [
            { id: 'menu_cotizar', title: 'üîç Nueva b√∫squeda' },
            { id: 'volver_menu', title: 'üè† Volver al men√∫' }
          ];
          await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
        }
        break;

      case 'QUOTE_VIEW_RESULTS':
        // Usuario est√° viendo resultados y puede seleccionar un producto por n√∫mero
        const productIndex = parseInt(messageText);
        if (!isNaN(productIndex) && productIndex > 0) {
          await showQuoteProductDetails(userPhone, productIndex);
        } else if (messageText.toLowerCase().includes('siguiente') || messageText.toLowerCase().includes('mas')) {
          // Mostrar siguiente p√°gina de resultados
          const currentPage = userSessions[userPhone].quoteResultsPage || 1;
          const results = userSessions[userPhone].quoteResults || [];
          const totalPages = Math.ceil(results.length / 5);

          if (currentPage < totalPages) {
            userSessions[userPhone].quoteResultsPage = currentPage + 1;
            const productList = formatProductList(results, currentPage + 1, 5);
            await sendTextMessage(userPhone, productList);
          } else {
            await sendTextMessage(userPhone, 'üìÑ Ya est√°s en la √∫ltima p√°gina de resultados.');
            const buttons = [
              { id: 'menu_cotizar', title: 'üîç Nueva b√∫squeda' },
              { id: 'volver_menu', title: 'üè† Volver al men√∫' }
            ];
            await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
          }
        } else {
          await sendTextMessage(userPhone, '‚ùå Por favor ingresa el n√∫mero del producto que deseas ver o escribe "siguiente" para m√°s resultados.');
          const buttons = [
            { id: 'menu_cotizar', title: 'üîç Nueva b√∫squeda' },
            { id: 'volver_menu', title: 'üè† Volver al men√∫' }
          ];
          await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
        }
        break;

      case 'VIEWING_INFO':
        // Usuario est√° viendo informaci√≥n est√°tica (horarios, garant√≠as, env√≠os, puntos, promociones)
        // Solo aceptar botones, rechazar cualquier otro input
        const errorMsg = '‚ùå *Opci√≥n no v√°lida.*';
        const buttons = [
          { id: 'volver_menu', title: 'üè† Volver al men√∫' }
        ];
        await sendInteractiveButtons(userPhone, errorMsg, buttons);
        break;

      case 'ADVISOR_MENU':
        // Usuario est√° en el men√∫ de selecci√≥n de tipo de asesor
        // Solo aceptar botones, rechazar cualquier otro input
        const advisorMenuErrorMsg = '‚ùå *Opci√≥n no v√°lida.*\n\nPor favor selecciona una de las opciones del men√∫.';
        const advisorMenuButtons = [
          { id: 'asesor_cotizar', title: 'üîç Cotizar autoparte' },
          { id: 'asesor_varios', title: 'üí¨ Atenci√≥n general' },
          { id: 'volver_menu', title: 'üè† Volver al men√∫' }
        ];
        await sendInteractiveButtons(userPhone, advisorMenuErrorMsg, advisorMenuButtons);
        break;

      default:
        await showMainMenu(userPhone);
    }

    // Persistir sesi√≥n despu√©s de cualquier cambio en el switch
    

  } catch (error) {
    console.error('Error manejando selecci√≥n:', error);
    // Intentar enviar mensaje de error al usuario
    try {
      await sendTextMessage(userPhone, '‚ùå Ocurri√≥ un error. Por favor intenta de nuevo.');
      await showMainMenu(userPhone);
    } catch (innerError) {
      console.error('‚ùå Error cr√≠tico enviando mensaje de error:', innerError);
      // No hacer nada m√°s, evitar loop infinito
    }
  }
  } catch (outerError) {
    // Capturar errores en las validaciones iniciales
    console.error('‚ùå Error cr√≠tico en handleMenuSelection:', outerError);
  }
};

/**
 * Muestra el men√∫ principal
 */
const showMainMenu = async (userPhone) => {
  userSessions[userPhone] = {
    state: 'MAIN_MENU',
    cart: [],
    selectedCategory: null,
    selectedSubcategory: null,
    categoriesList: [],
    subcategoriesList: [],
    lastActivity: Date.now()
  };

  // Crear lista interactiva del men√∫ principal
    const sections = [
      {
        title: "Opciones disponibles",
        rows: [
          {
            id: 'menu_cotizar',
            title: 'üîç Cotizar un repuesto',
            description: 'Busca por marca y modelo de veh√≠culo'
          },
          {
            id: 'menu_catalogo',
            title: 'üìö Ver cat√°logo',
            description: 'Explora nuestros productos'
          },
          {
            id: 'menu_pedidos',
            title: 'üì¶ Estado de pedido',
            description: 'Consulta el estado de tu pedido'
          },
          {
            id: 'menu_garantias',
            title: 'üõ°Ô∏è Garant√≠as',
            description: 'Garant√≠as y devoluciones'
          },
          {
            id: 'menu_promociones',
            title: 'üî• Promociones',
            description: 'Descuentos y ofertas del mes'
          },
          {
            id: 'menu_envios',
            title: 'üìÆ Env√≠o y pagos',
            description: 'Tiempos, m√©todos de pago y env√≠os'
          },
          {
            id: 'menu_puntos',
            title: 'üìç Puntos de entrega',
            description: 'Recogida local y direcci√≥n'
          },
          {
            id: 'menu_asesor',
            title: 'üí¨ Hablar con asesor',
            description: 'Atenci√≥n personalizada'
          },
          {
            id: 'menu_horarios',
            title: 'üïí Ver horarios',
            description: 'Horarios de atenci√≥n'
          }
        ]
      }
    ];

  const bodyText = `üëã ¬°Hola! Soy *ZonaBot*, el asistente virtual de Zona Repuestera üöóüí¨\n\n` +
    `Estoy aqu√≠ para ayudarte con todo lo que necesites sobre *autopartes, cotizaciones, env√≠o y m√°s*.\n\n` +
    `Por favor selecciona una de las siguientes opciones para continuar üëáüèª\n\n` +
    `_Si est√°s ausente durante 20 minutos, se terminar√° la sesi√≥n._`;

  await sendInteractiveList(userPhone, bodyText, 'üìã Ver opciones', sections);
};

/**
 * Maneja la selecci√≥n en el men√∫ principal
 * IMPORTANTE: Solo acepta palabras clave (no n√∫meros), ya que el men√∫ es interactivo
 */
const handleMainMenuSelection = async (userPhone, messageText) => {
  // Solo aceptar palabras clave (no n√∫meros)
  if (messageText.includes('cat√°logo') || messageText.includes('catalogo') || messageText.includes('producto')) {
    await showCategories(userPhone);
  } else if (messageText.includes('asesor') || messageText.includes('asesora') || messageText.includes('ayuda')) {
    // Verificar horario de atenci√≥n ANTES de mostrar el men√∫
    if (!isWithinBusinessHours()) {
      const outOfHoursMessage = `‚è∞ *FUERA DE HORARIO DE ATENCI√ìN*\n\n` +
        `Lo sentimos, actualmente estamos fuera de nuestro horario de atenci√≥n para brindar asesor√≠a personalizada.\n\n` +
        `üìÖ *Nuestros horarios son:*\n` +
        `‚Ä¢ Lunes a viernes: 8:00 AM - 4:30 PM\n` +
        `‚Ä¢ S√°bados: 8:00 AM - 12:40 PM\n` +
        `‚Ä¢ Domingos: Cerrado\n\n` +
        `üí° Puedes contactarnos en nuestros horarios o seguir explorando m√°s opciones en nuestro men√∫ autom√°tico.`;

      const buttons = [
        { id: 'volver_menu', title: 'üè† Volver al men√∫' }
      ];

      await sendInteractiveButtons(userPhone, outOfHoursMessage, buttons);
      console.log(`‚è∞ Usuario ${userPhone} intent√≥ contactar asesor fuera de horario`);
      return;
    }

    // Mostrar men√∫ de opciones de asesor
    userSessions[userPhone].state = 'ADVISOR_MENU';

    const mensaje = `¬°Hola! üëã Estoy aqu√≠ para ayudarte üòä\n\n` +
      `*¬øC√≥mo te gustar√≠a que te asista hoy?*\n\n` +
      `Selecciona una opci√≥n y con gusto te atender√©:`;

    const buttons = [
      { id: 'asesor_cotizar', title: 'üîç Cotizar autoparte' },
      { id: 'asesor_varios', title: 'üí¨ Atenci√≥n general' },
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, mensaje, buttons);
  } else if (messageText.includes('horario')) {
    userSessions[userPhone].state = 'VIEWING_INFO';
    const mensaje = `üïí *HORARIOS DE ATENCI√ìN*\n\n` +
      `Lunes a Viernes: 8:00 AM - 4:30 PM\n` +
      `S√°bados: 8:00 AM - 12:40 PM\n` +
      `Domingos: Cerrado`;

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, mensaje, buttons);
  } else if (messageText.includes('garant√≠a') || messageText.includes('garantia') || messageText.includes('devoluc')) {
    userSessions[userPhone].state = 'VIEWING_INFO';
    const mensaje = `üõ°Ô∏è *GARANT√çAS Y DEVOLUCIONES*\n\n` +
      `üßæ *Todos nuestros productos cuentan con garant√≠a de 3 meses*, excepto la l√≠nea de el√©ctricos originales.\n\n` +
      `‚ö†Ô∏è *Importante:* Los productos el√©ctricos originales tienen garant√≠a *solo si presentan fallas de f√°brica en el momento de la instalaci√≥n*.\n\n` +
      `Despu√©s de instalados y en funcionamiento, no aplica garant√≠a por da√±os causados por mal uso, voltajes incorrectos u otras manipulaciones.\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `Si presentas alg√∫n inconveniente con tu compra, escr√≠benos con:\n\n` +
      `‚úî N√∫mero de pedido\n` +
      `‚úî Nombre del producto\n` +
      `‚úî Breve descripci√≥n del caso\n\n` +
      `Nuestro equipo revisar√° tu solicitud y te responder√° lo antes posible.`;

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, mensaje, buttons);
  } else if (messageText.includes('env√≠o') || messageText.includes('envio') || messageText.includes('pago')) {
    userSessions[userPhone].state = 'VIEWING_INFO';
    const mensaje = `üìÆ *INFORMACI√ìN SOBRE TIEMPOS DE ENV√çO Y PAGOS*\n\n` +
      `üìÆ Realizamos env√≠os a todo Colombia.\n\n` +
      `üöö *Tiempo estimado:* 1 a 3 d√≠as h√°biles\n\n` +
      `üí≥ *M√©todos de pago:* Wompi, Addi, transferencia, contra entrega (seg√∫n zona)\n\n` +
      `üì¶ Empacamos con cuidado para garantizar que tus repuestos lleguen en perfecto estado.`;

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, mensaje, buttons);
  } else if (messageText.includes('punto') || messageText.includes('entrega') || messageText.includes('recogida') || messageText.includes('direcci√≥n') || messageText.includes('direccion')) {
    userSessions[userPhone].state = 'VIEWING_INFO';
    const mensaje = `üìç *PUNTOS DE ENTREGA O RECOGIDA LOCAL*\n\n` +
      `üì¶ Puedes recoger tu pedido en nuestra sede o coordinar contra entrega (seg√∫n zona)\n\n` +
      `üìç *Direcci√≥n:* CR 50A # 46 ‚Äì 48, Piso 3. Itag√º√≠ (Antioquia)\n\n` +
      `üìû *Tel√©fono:* 316 483 6166\n\n` +
      `üïì *Horario:*\n` +
      `Lunes a viernes 8:00 a.m. ‚Äì 4:30 p.m.\n` +
      `S√°bados 8:00 a.m. ‚Äì 12:40 p.m.\n\n` +
      `üìå Ver en Google Maps:\n` +
      `https://www.google.com/maps/search/?api=1&query=CR+50A+%23+46-48+Itag√º√≠+Antioquia`;

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, mensaje, buttons);
  } else if (messageText.includes('promo') || messageText.includes('descuento') || messageText.includes('oferta')) {
    userSessions[userPhone].state = 'VIEWING_INFO';
    // Obtener mensaje de promociones
    const mensaje = getPromoMessage();

    // Enviar el mensaje de promociones sin botones (sin l√≠mite de caracteres)
    await sendTextMessage(userPhone, mensaje);

    // Enviar botones en mensaje separado
    const buttonMessage = 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä';
    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, buttonMessage, buttons);
  } else if (messageText.includes('pedido') || messageText.includes('orden') || messageText.includes('estado')) {
    // Solicitar email para consultar pedidos
    userSessions[userPhone].state = 'WAITING_EMAIL_FOR_ORDERS';
    await sendTextMessage(
      userPhone,
      `¬°Perfecto! üéØ\n\n` +
      `üì¶ *¬øQuieres consultar tu pedido?*\n\n` +
      `Por favor, escr√≠beme el üìß *correo electr√≥nico* con el que hiciste tu compra y te mostrar√© toda la informaci√≥n de tu pedido. üòä\n\n` +
      `‚úçÔ∏è _Escribe tu correo aqu√≠:_`
    );

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
  } else {
    // Rechazar cualquier otro input (incluyendo n√∫meros)
    const errorMsg = `‚ùå *Opci√≥n no v√°lida.*\n\n` +
      `Por favor, usa el bot√≥n *"üìã Ver opciones"* del men√∫ para seleccionar una opci√≥n.`;

    const buttons = [
      { id: 'volver_menu', title: 'üè† Ver men√∫' }
    ];

    await sendInteractiveButtons(userPhone, errorMsg, buttons);
  }
};

/**
 * Muestra la lista de categor√≠as
 */
const showCategories = async (userPhone) => {
  userSessions[userPhone].state = 'CATEGORY_LIST';
  await sendTextMessage(userPhone, '‚è≥ Cargando cat√°logo...');
  
  try {
    const categories = await getCategories();
    
    if (!categories || categories.length === 0) {
      await sendTextMessage(userPhone, '‚ùå No hay categor√≠as disponibles en este momento.');
      await showMainMenu(userPhone);
      return;
    }

    // Guardar categor√≠as en la sesi√≥n
    userSessions[userPhone].categoriesList = categories;

    // Crear mensaje con todas las categor√≠as numeradas
    let mensaje = `üîß *Estas son nuestras categor√≠as principales*\n\n`;

    categories.forEach((cat, index) => {
      const numero = index + 1;
      const subcatInfo = cat.subcategory_count ? ` (${cat.subcategory_count}sub)` : '';
      mensaje += `${numero}. ${cat.name}${subcatInfo}\n`;
    });
    
    mensaje += `\nüí¨ *Escribe el n√∫mero* de la categor√≠a que deseas ver.`;
    mensaje += `\n\n_Ejemplo: escribe *1* para ver ${categories[0].name}_`;

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, mensaje, buttons);
  } catch (error) {
    console.error('Error mostrando categor√≠as:', error);
    await sendTextMessage(userPhone, '‚ùå Error al cargar el cat√°logo. Intenta de nuevo m√°s tarde.');
    await showMainMenu(userPhone);
  }
};

/**
 * Maneja la selecci√≥n de categor√≠a
 */
const handleCategorySelection = async (userPhone, message) => {
  // El usuario escribe un n√∫mero
  const numero = parseInt(message.trim());
  
  if (isNaN(numero) || numero < 1) {
    const buttons = [
      { id: 'menu_catalogo', title: 'üì¶ Ver cat√°logo' },
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];
    await sendInteractiveButtons(userPhone, '‚ùå Por favor escribe un n√∫mero v√°lido.', buttons);
    return;
  }

  const categories = userSessions[userPhone].categoriesList || [];
  
  if (numero > categories.length) {
    const buttons = [
      { id: 'menu_catalogo', title: 'üì¶ Ver cat√°logo' },
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];
    await sendInteractiveButtons(userPhone, `‚ùå N√∫mero inv√°lido. Tenemos ${categories.length} categor√≠as.`, buttons);
    return;
  }

  // Obtener la categor√≠a seleccionada (√≠ndice = n√∫mero - 1)
  const selectedCategory = categories[numero - 1];
  userSessions[userPhone].selectedCategory = selectedCategory.id;
  userSessions[userPhone].selectedCategoryName = selectedCategory.name;

  await showSubCategories(userPhone, selectedCategory.id, selectedCategory.name);
};

/**
 * Muestra las subcategor√≠as de una categor√≠a
 */
const showSubCategories = async (userPhone, categoryId, categoryName = null) => {
  userSessions[userPhone].state = 'SUBCATEGORY_LIST';
  await sendTextMessage(userPhone, '‚è≥ Cargando subcategor√≠as...');

  try {
    const subcategories = await getSubCategories(categoryId);

    if (!subcategories || subcategories.length === 0) {
      await sendTextMessage(userPhone, '‚ùå No hay subcategor√≠as disponibles para esta categor√≠a.');
      await showCategories(userPhone);
      return;
    }

    // Guardar subcategor√≠as en la sesi√≥n
    userSessions[userPhone].subcategoriesList = subcategories;

    // Crear mensaje con todas las subcategor√≠as numeradas
    // Usar el nombre de la categor√≠a si est√° disponible, sino buscar en la sesi√≥n
    const catName = categoryName || userSessions[userPhone].selectedCategoryName || 'esta categor√≠a';
    let mensaje = `¬°Perfecto! *Estas son las subcategor√≠as de ${catName}*\n\n`;
    
    subcategories.forEach((subcat, index) => {
      const numero = index + 1;
      mensaje += `${numero}. ${subcat.name}\n`;
    });
    
    mensaje += `\nüí¨ *Escribe el n√∫mero* de la subcategor√≠a que deseas ver.`;
    mensaje += `\n\n_Ejemplo: escribe *1* para ver ${subcategories[0].name}_`;

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, mensaje, buttons);
  } catch (error) {
    console.error('Error mostrando subcategor√≠as:', error);
    await sendTextMessage(userPhone, '‚ùå Error al cargar subcategor√≠as.');
    await showCategories(userPhone);
  }
};

/**
 * Maneja la selecci√≥n de subcategor√≠a
 */
const handleSubcategorySelection = async (userPhone, message) => {
  // El usuario escribe un n√∫mero
  const numero = parseInt(message.trim());
  
  if (isNaN(numero) || numero < 1) {
    const buttons = [
      { id: 'menu_catalogo', title: 'üì¶ Ver cat√°logo' },
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];
    await sendInteractiveButtons(userPhone, '‚ùå Por favor escribe un n√∫mero v√°lido.', buttons);
    return;
  }

  const subcategories = userSessions[userPhone].subcategoriesList || [];
  
  if (numero > subcategories.length) {
    const buttons = [
      { id: 'menu_catalogo', title: 'üì¶ Ver cat√°logo' },
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];
    await sendInteractiveButtons(userPhone, `‚ùå N√∫mero inv√°lido. Hay ${subcategories.length} subcategor√≠as.`, buttons);
    return;
  }

  // Obtener la subcategor√≠a seleccionada (√≠ndice = n√∫mero - 1)
  const selectedSubcategory = subcategories[numero - 1];
  userSessions[userPhone].selectedSubcategory = selectedSubcategory.id;
  userSessions[userPhone].selectedSubcategoryData = selectedSubcategory; // Guardar datos completos
  
  // Primero verificar si esta subcategor√≠a tiene m√°s subcategor√≠as
  await sendTextMessage(userPhone, '‚è≥ Verificando opciones disponibles...');
  
  const subSubcategories = await getSubCategories(selectedSubcategory.id);
  
  if (subSubcategories && subSubcategories.length > 0) {
    // Si tiene sub-subcategor√≠as, mostrarlas
    await showSubCategories(userPhone, selectedSubcategory.id);
  } else {
    // Si no tiene m√°s subcategor√≠as, mostrar productos
    await showProducts(userPhone, selectedSubcategory.id);
  }
};

/**
 * Muestra los productos de una subcategor√≠a
 */
const showProducts = async (userPhone, subcategoryId) => {
  userSessions[userPhone].state = 'PRODUCT_LIST';
  await sendTextMessage(userPhone, '‚è≥ Cargando productos...');

  try {
    const products = await getProducts(subcategoryId);

    if (!products || products.length === 0) {
      await sendTextMessage(userPhone, '‚ùå No hay productos disponibles en esta subcategor√≠a.');
      const categoryId = userSessions[userPhone].selectedCategory;
      await showSubCategories(userPhone, categoryId);
      return;
    }

    // Guardar lista de productos en la sesi√≥n para selecci√≥n posterior
    userSessions[userPhone].productsList = products;

    // Formatear y enviar productos como mensajes de texto
    // WhatsApp limita el mensaje a 4096 caracteres, as√≠ que limitamos a 10 productos
    const maxProducts = 10;
    const productsToShow = products.slice(0, maxProducts);

    let mensaje = `üõí *Productos Disponibles* (${products.length})\n\n`;

    productsToShow.forEach((prod, index) => {
      // Formatear precio en pesos colombianos
      const price = prod.final_price || prod.price || prod.base_price || 0;
      const formattedPrice = new Intl.NumberFormat('es-CO', {
        style: 'currency',
        currency: 'COP',
        minimumFractionDigits: 0
      }).format(price);

      // Nombre del producto sin asteriscos para evitar negrilla inconsistente
      mensaje += `${index + 1}. ${prod.name}\n`;
      mensaje += `   üí∞ Precio: ${formattedPrice}\n`;

      // Agregar c√≥digo si existe
      if (prod.code || prod.sku) {
        mensaje += `   üîñ C√≥digo: ${prod.code || prod.sku}\n`;
      }

      // Agregar stock si existe
      if (prod.stock !== undefined && prod.stock !== null) {
        const stockStatus = prod.stock > 0 ? `‚úÖ ${prod.stock} disponibles` : '‚ùå Agotado';
        mensaje += `   üì¶ Stock: ${stockStatus}\n`;
      }

      mensaje += '\n';
    });

    if (products.length > maxProducts) {
      mensaje += `_Mostrando ${maxProducts} de ${products.length} productos_\n\n`;
    }

    // Agregar instrucci√≥n para seleccionar producto por n√∫mero
    mensaje += `üí¨ *Escribe el n√∫mero del producto para ver sus detalles y el link de compra*\n\n`;

    // Obtener datos de la subcategor√≠a para generar el link correcto
    const subcategoryData = userSessions[userPhone].selectedSubcategoryData;
    const categoryId = userSessions[userPhone].selectedCategory;

    if (categoryId && subcategoryId) {
      // Link directo a los productos de esta subcategor√≠a
      mensaje += `üåê Tambi√©n puedes hacer clic aqu√≠ para ver todos los productos y comprarlo en l√≠nea de forma segura y r√°pida, o agregarlo al carrito üëá\n`;
      mensaje += `https://zonarepuestera.com.co/products/?category=${categoryId}&subcategory=${subcategoryId}`;
    } else if (categoryId) {
      // Fallback: mostrar subcategor√≠as de la categor√≠a
      mensaje += `üåê Tambi√©n puedes hacer clic aqu√≠ para ver todos los productos y comprarlo en l√≠nea de forma segura y r√°pida, o agregarlo al carrito üëá\n`;
      mensaje += `https://zonarepuestera.com.co/sub-categories/?category=${categoryId}`;
    } else {
      // Fallback general: link a productos
      mensaje += `üåê Tambi√©n puedes hacer clic aqu√≠ para ver todos los productos y comprarlo en l√≠nea de forma segura y r√°pida, o agregarlo al carrito üëá\n`;
      mensaje += `https://zonarepuestera.com.co/products/`;
    }

    // Enviar el mensaje con los productos (sin botones para evitar l√≠mite de 1024 caracteres)
    await sendTextMessage(userPhone, mensaje);

    // Enviar botones en un mensaje separado corto
    const buttonMessage = 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä';
    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' },
      { id: 'menu_catalogo', title: 'üìö Ver cat√°logo' }
    ];

    await sendInteractiveButtons(userPhone, buttonMessage, buttons);
    // Mantener estado PRODUCT_LIST para permitir selecci√≥n por n√∫mero
    
  } catch (error) {
    console.error('Error mostrando productos:', error);
    await sendTextMessage(userPhone, '‚ùå Error al cargar productos.');
    const categoryId = userSessions[userPhone].selectedCategory;
    await showSubCategories(userPhone, categoryId);
  }
};

/**
 * Muestra los detalles de un producto espec√≠fico del cat√°logo
 */
const showProductDetails = async (userPhone, productIndex) => {
  const productsList = userSessions[userPhone].productsList;

  if (!productsList || productsList.length === 0) {
    await sendTextMessage(userPhone, '‚ùå No hay productos disponibles.');
    await showMainMenu(userPhone);
    return;
  }

  const product = productsList[productIndex - 1];

  if (!product) {
    await sendTextMessage(
      userPhone,
      `‚ùå *Producto no encontrado*\n\n` +
      `Verifica el n√∫mero del producto. Hay ${productsList.length} productos disponibles.`
    );
    return;
  }

  // Formatear detalles del producto (similar a formatProduct de quoteService)
  const price = product.final_price || product.price || product.base_price || 0;
  const formattedPrice = new Intl.NumberFormat('es-CO', {
    style: 'currency',
    currency: 'COP',
    minimumFractionDigits: 0
  }).format(price);

  let mensaje = `üì¶ *${product.name || product.description}*\n\n`;

  // C√≥digo del producto
  if (product.code || product.sku) {
    mensaje += `üîñ *C√≥digo:* ${product.code || product.sku}\n`;
  }

  // Marca si existe
  if (product.brand) {
    mensaje += `üè∑Ô∏è *Marca:* ${product.brand}\n`;
  }

  // Precio
  mensaje += `üí∞ *Precio:* ${formattedPrice}\n`;

  // Stock
  if (product.stock !== undefined && product.stock !== null) {
    const stockStatus = product.stock > 0 ? `${product.stock} unidades disponibles` : 'Agotado';
    mensaje += `üìä *Stock:* ${stockStatus}\n`;
  }

  // Descripci√≥n adicional si existe
  if (product.description && product.description !== product.name) {
    mensaje += `\nüìù *Descripci√≥n:* ${product.description}\n`;
  }

  // Link directo al producto individual
  if (product.id) {
    mensaje += `\nüåê *Puedes hacer clic aqu√≠ para ver m√°s detalles y comprarlo en l√≠nea de forma segura y r√°pida, o agregarlo al carrito* üëá\n`;
    mensaje += `https://zonarepuestera.com.co/products/${product.id}/`;
  }

  await sendTextMessage(userPhone, mensaje);

  const buttons = [
    { id: 'menu_catalogo', title: 'üìö Ver cat√°logo' },
    { id: 'volver_menu', title: 'üè† Volver al men√∫' }
  ];

  await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
};

/**
 * Maneja la entrada de email para consultar pedidos
 */
const handleOrdersEmailInput = async (userPhone, email) => {
  const trimmedEmail = email.trim();

  // Validar formato de email
  if (!isValidEmail(trimmedEmail)) {
    await sendTextMessage(
      userPhone,
      `‚ùå *Email inv√°lido*\n\n` +
      `Por favor ingresa un correo electr√≥nico v√°lido.\n\n` +
      `Ejemplo: *juan@email.com*\n\n` +
      `_Escribe tu correo nuevamente o vuelve al men√∫:_`
    );

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' },
      { id: 'repetir_correo', title: '‚úâÔ∏è Repetir correo' }
    ];

    await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
    return;
  }

  try {
    // Mostrar mensaje de carga
    await sendTextMessage(userPhone, '‚è≥ Buscando pedidos...');
    
    // Obtener pedidos del backend
    const orders = await getOrdersByEmail(trimmedEmail);
    
    if (!orders || orders.length === 0) {
      await sendTextMessage(
        userPhone,
        `üì¶ *No se encontraron pedidos*\n\n` +
        `No hay pedidos asociados al correo *${trimmedEmail}*.\n\n` +
        `Verifica que el correo sea el mismo que usaste al hacer tu compra.`
      );

      const buttons = [
        { id: 'volver_menu', title: 'üè† Volver al men√∫' },
        { id: 'repetir_correo', title: '‚úâÔ∏è Repetir correo' }
      ];

      await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
      userSessions[userPhone].state = 'MAIN_MENU';
      return;
    }

    // Guardar pedidos en la sesi√≥n
    userSessions[userPhone].ordersList = orders;
    userSessions[userPhone].ordersEmail = trimmedEmail;

    // Si solo hay 1 pedido, mostrar detalles directamente
    if (orders.length === 1) {
      const orderDetails = formatOrderDetails(orders[0]);
      await sendTextMessage(userPhone, orderDetails);
      
      const buttons = [
        { id: 'volver_menu', title: 'üè† Volver al men√∫' }
      ];

      await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
      userSessions[userPhone].state = 'MAIN_MENU';
      return;
    }

    // Si hay m√∫ltiples pedidos, mostrar lista resumida
    const ordersList = formatOrdersList(orders);
    await sendTextMessage(userPhone, ordersList);
    
    await sendTextMessage(
      userPhone,
      `\nüí¨ *Para ver detalles de un pedido:*\n` +
      `Escribe el *n√∫mero del pedido*\n\n` +
      `_Ejemplo: escribe *${orders[0].id}* para ver el pedido #${orders[0].id}_`
    );
    
    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
    userSessions[userPhone].state = 'VIEWING_ORDER_DETAILS';

  } catch (error) {
    console.error('Error al buscar pedidos:', error);
    await sendTextMessage(
      userPhone,
      `‚ùå *Error al consultar pedidos*\n\n` +
      `No se pudieron obtener los pedidos en este momento.\n\n` +
      `Por favor intenta m√°s tarde o contacta con un asesor.`
    );

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' },
      { id: 'menu_asesor', title: 'üí¨ Hablar con asesor' }
    ];

    await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
    userSessions[userPhone].state = 'MAIN_MENU';
  }
};

/**
 * Maneja la selecci√≥n de un pedido espec√≠fico para ver detalles
 */
const handleOrderSelection = async (userPhone, orderIdText) => {
  const orderId = parseInt(orderIdText.trim());

  if (isNaN(orderId)) {
    await sendTextMessage(
      userPhone,
      `‚ùå *N√∫mero inv√°lido*\n\n` +
      `Por favor escribe el n√∫mero del pedido que deseas consultar.\n\n` +
      `_Ejemplo: escribe *123* para ver el pedido #123_`
    );

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
    return;
  }

  const ordersList = userSessions[userPhone].ordersList;
  if (!ordersList || ordersList.length === 0) {
    await sendTextMessage(userPhone, '‚ùå No hay pedidos disponibles. Por favor inicia una nueva consulta.');
    await showMainMenu(userPhone);
    return;
  }

  // Buscar el pedido en la lista
  const order = ordersList.find(o => o.id === orderId);

  if (!order) {
    await sendTextMessage(
      userPhone,
      `‚ùå *Pedido no encontrado*\n\n` +
      `El pedido #${orderId} no est√° en tu lista de pedidos.\n\n` +
      `Verifica el n√∫mero e intenta nuevamente.`
    );

    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];

    await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
    return;
  }

  // Mostrar detalles del pedido
  const orderDetails = formatOrderDetails(order);
  await sendTextMessage(userPhone, orderDetails);

  const buttons = [
    { id: 'volver_menu', title: 'üè† Volver al men√∫' }
  ];

  await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
  userSessions[userPhone].state = 'MAIN_MENU';
};

/**
 * ========================
 * FLUJO DE COTIZACI√ìN DE AUTOPARTES
 * ========================
 */

/**
 * Inicia el flujo de cotizaci√≥n de autopartes
 */
const startQuoteFlow = async (userPhone) => {
  userSessions[userPhone].state = 'QUOTE_SELECT_BRAND';
  userSessions[userPhone].quoteFilters = {
    brand: null,
    model: null,
    category: null,
    subcategory: null
  };
  userSessions[userPhone].lastActivity = Date.now();

  await sendTextMessage(
    userPhone,
    `*Trabajo para ti 24/7 para responder tus consultas rapidamente y ayudarte con tu cotizaci√≥n.*\n\n` +
    `*!Vamos a buscar tu repuesto!*\n\n` +
    `Buscaremos por:\n` +
    `1Ô∏è‚É£ Marca de tu veh√≠culo\n` +
    `2Ô∏è‚É£ Modelo\n` +
    `3Ô∏è‚É£ Categor√≠a del repuesto\n` +
    `4Ô∏è‚É£ Subcategor√≠a (opcional)\n\n` +
    `‚è≥ _Cargando marcas disponibles..._`
  );

  await showCarBrands(userPhone);
};

/**
 * Muestra las marcas de veh√≠culos disponibles
 */
const showCarBrands = async (userPhone) => {
  const result = await getCarBrands();
  
  if (!result.success || !result.data || result.data.length === 0) {
    await sendTextMessage(
      userPhone,
      `‚ùå *Error*\n\nNo se pudieron cargar las marcas de veh√≠culos.\n\nIntenta nuevamente m√°s tarde.`
    );
    await showMainMenu(userPhone);
    return;
  }

  userSessions[userPhone].carBrandsList = result.data;
  
  // Crear lista numerada en texto (sin l√≠mite de 10)
  let message = `üöó *SELECCIONA LA MARCA DE TU VEH√çCULO*\n\n`;
  message += `Tenemos ${result.data.length} marcas disponibles.\n\n`;

  result.data.forEach((brand, index) => {
    message += `${index + 1}. ${brand.name}\n`;
  });

  message += `\nüìù *Responde con el n√∫mero* de la marca que deseas.`;

  const buttons = [
    { id: 'volver_menu', title: 'üè† Volver al men√∫' }
  ];

  await sendInteractiveButtons(userPhone, message, buttons);
  userSessions[userPhone].state = 'QUOTE_SELECT_BRAND';
};

/**
 * Muestra los modelos de una marca seleccionada
 */
const showCarModels = async (userPhone, brandId) => {
  const result = await getCarModels(brandId);
  
  if (!result.success || !result.data || result.data.length === 0) {
    await sendTextMessage(
      userPhone,
      `‚ùå *Error*\n\nNo se pudieron cargar los modelos para esta marca.\n\nIntenta con otra marca.`
    );
    await showCarBrands(userPhone);
    return;
  }

  userSessions[userPhone].carModelsList = result.data;
  userSessions[userPhone].quoteFilters.brand = brandId;
  
  const brandName = userSessions[userPhone].carBrandsList.find(b => b.id === brandId)?.name || '';

  // Crear lista numerada en texto
  let message = `üöô *SELECCIONA EL MODELO DE TU ${brandName.toUpperCase()}*\n\n`;
  message += `Tenemos ${result.data.length} modelos disponibles.\n\n`;

  result.data.forEach((model, index) => {
    message += `${index + 1}. ${model.name}\n`;
  });

  message += `\nüìù *Responde con el n√∫mero* del modelo que deseas.`;

  const buttons = [
    { id: 'volver_menu', title: 'üè† Volver al men√∫' }
  ];

  await sendInteractiveButtons(userPhone, message, buttons);
  userSessions[userPhone].state = 'QUOTE_SELECT_MODEL';
};

/**
 * Muestra las categor√≠as de productos disponibles para la marca y modelo seleccionados
 */
const showQuoteCategories = async (userPhone) => {
  const brandId = userSessions[userPhone].quoteFilters.brand;
  const modelId = userSessions[userPhone].quoteFilters.model;
  
  const result = await getProductCategories(brandId, modelId);
  
  if (!result.success || !result.data || result.data.length === 0) {
    await sendTextMessage(
      userPhone,
      `‚ùå *Error*\n\nNo se encontraron categor√≠as de productos disponibles para este modelo.\n\nIntenta con otro modelo.`
    );
    await showMainMenu(userPhone);
    return;
  }

  userSessions[userPhone].quoteCategoriesList = result.data;

  // Crear lista numerada en texto
  let message = `üìÅ *SELECCIONA LA CATEGOR√çA DEL REPUESTO*\n\n`;
  message += `¬øQu√© tipo de repuesto necesitas?\n\n`;

  result.data.forEach((category, index) => {
    message += `${index + 1}. ${category.name}\n`;
  });

  message += `\nüìù *Responde con el n√∫mero* de la categor√≠a que necesitas.`;

  const buttons = [
    { id: 'volver_menu', title: 'üè† Volver al men√∫' }
  ];

  await sendInteractiveButtons(userPhone, message, buttons);
  userSessions[userPhone].state = 'QUOTE_SELECT_CATEGORY';
};

/**
 * Muestra las subcategor√≠as de una categor√≠a disponibles para la marca y modelo seleccionados
 */
const showQuoteSubcategories = async (userPhone, categoryId, categoryName = null) => {
  const brandId = userSessions[userPhone].quoteFilters.brand;
  const modelId = userSessions[userPhone].quoteFilters.model;

  const result = await getProductSubcategories(categoryId, brandId, modelId);

  if (!result.success || !result.data || result.data.length === 0) {
    // Si no hay subcategor√≠as, buscar productos directamente
    userSessions[userPhone].quoteFilters.category = categoryId;
    await searchQuoteProducts(userPhone);
    return;
  }

  userSessions[userPhone].quoteSubcategoriesList = result.data;
  userSessions[userPhone].quoteFilters.category = categoryId;

  // Crear lista numerada en texto
  const catName = categoryName || userSessions[userPhone].quoteCategoryName || 'esta categor√≠a';
  let message = `¬°Perfecto! *Estas son las subcategor√≠as de ${catName}*\n\n`;

  result.data.forEach((subcategory, index) => {
    message += `${index + 1}. ${subcategory.name}\n`;
  });

  message += `\n0. ‚è≠Ô∏è Omitir subcategor√≠a (buscar sin filtro)\n`;
  message += `\nüìù *Responde con el n√∫mero* de la subcategor√≠a o 0 para omitir.`;

  const buttons = [
    { id: 'volver_menu', title: 'üè† Volver al men√∫' }
  ];

  await sendInteractiveButtons(userPhone, message, buttons);
  userSessions[userPhone].state = 'QUOTE_SELECT_SUBCATEGORY';
};

/**
 * Busca y muestra los productos seg√∫n los filtros
 */
const searchQuoteProducts = async (userPhone) => {
  const filters = userSessions[userPhone].quoteFilters;
  
  await sendTextMessage(
    userPhone,
    `üîç *Buscando productos...*\n\n` +
    `Por favor espera un momento.`
  );

  const result = await searchProducts(filters);
  
  if (!result.success) {
    await sendTextMessage(
      userPhone,
      `‚ùå *Error en la b√∫squeda*\n\n` +
      `No se pudieron obtener los productos.\n\nIntenta nuevamente.`
    );
    const buttons = [
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];
    await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
    return;
  }

  if (result.count === 0) {
    await sendTextMessage(
      userPhone,
      `üòî *No se encontraron productos*\n\n` +
      `No hay productos disponibles con los filtros seleccionados.\n\n` +
      `Intenta con otros filtros o cont√°ctanos para ayuda personalizada.`
    );

    const buttons = [
      { id: 'menu_cotizar', title: 'üîç Nueva b√∫squeda' },
      { id: 'menu_asesor', title: 'üí¨ Hablar con asesor' },
      { id: 'volver_menu', title: 'üè† Volver al men√∫' }
    ];
    await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
    return;
  }

  // Guardar resultados y mostrar lista paginada
  userSessions[userPhone].quoteResults = result.data;
  userSessions[userPhone].quoteResultsPage = 1;
  userSessions[userPhone].state = 'QUOTE_VIEW_RESULTS';

  const productList = formatProductList(result.data, 1, 10, filters);
  await sendTextMessage(userPhone, productList);

  // Agregar instrucci√≥n para seleccionar producto por n√∫mero
  await sendTextMessage(
    userPhone,
    `üí¨ *Escribe el n√∫mero del producto para ver sus detalles y el link de compra*`
  );

  const buttons = [
    { id: 'menu_cotizar', title: 'üîç Nueva b√∫squeda' },
    { id: 'volver_menu', title: 'üè† Volver al men√∫' }
  ];
  await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
};

/**
 * Muestra los detalles de un producto espec√≠fico
 */
const showQuoteProductDetails = async (userPhone, productIndex) => {
  const results = userSessions[userPhone].quoteResults;
  
  if (!results || results.length === 0) {
    await sendTextMessage(userPhone, '‚ùå No hay productos disponibles.');
    await showMainMenu(userPhone);
    return;
  }

  const product = results[productIndex - 1];
  
  if (!product) {
    await sendTextMessage(userPhone, '‚ùå Producto no encontrado. Verifica el n√∫mero.');
    return;
  }

  const productDetails = formatProduct(product);
  await sendTextMessage(userPhone, productDetails);

  const buttons = [
    { id: 'menu_cotizar', title: 'üîç Nueva b√∫squeda' },
    { id: 'volver_menu', title: 'üè† Volver al men√∫' }
  ];

  await sendInteractiveButtons(userPhone, 'Estoy atento si necesitas m√°s informaci√≥n o ayuda üòä', buttons);
};

module.exports = {
  handleMenuSelection,
  showMainMenu,
  isUserWithAdvisor,
  deactivateAdvisorMode,
  markAdvisorResponse,  // Exportar para que el panel la pueda usar
  finalizeAdvisorConversation,
  updateLastActivity,  // Exportar para que el webhook la pueda usar
  getUserSession: (userPhone) => userSessions[userPhone]  // Exportar para verificar estado
};
