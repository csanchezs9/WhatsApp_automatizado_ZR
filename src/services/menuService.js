const { sendTextMessage, sendInteractiveButtons, sendInteractiveList } = require('./whatsappService');
const { getCategories, getSubCategories, getProducts } = require('./ecommerceService');

// Almacenamiento temporal de sesiones de usuario (en producci√≥n usa Redis o DB)
const userSessions = {};

// Usuarios que est√°n hablando con un asesor
const usersWithAdvisor = new Map(); // { userPhone: { startTime: Date, lastAdvisorMessage: Date } }

const ADVISOR_PHONE = process.env.ADVISOR_PHONE_NUMBER || '573173745021';
const ADVISOR_CONVERSATION_TIMEOUT = 24 * 60 * 60 * 1000; // 24 horas en milisegundos
const INACTIVITY_TIMEOUT = parseInt(process.env.INACTIVITY_TIMEOUT_MINUTES || '7') * 60 * 1000; // 7 minutos de inactividad

// Configuraci√≥n de limpieza de sesiones antiguas
const MAX_SESSION_AGE = 1 * 24 * 60 * 60 * 1000; // 1 d√≠a (24 horas)
const CLEANUP_INTERVAL = 24 * 60 * 60 * 1000; // Limpiar cada 24 horas

/**
 * Limpia sesiones antiguas de la memoria para prevenir fuga de memoria
 */
const cleanupOldSessions = () => {
  const now = Date.now();
  let cleanedCount = 0;
  
  for (const [userPhone, session] of Object.entries(userSessions)) {
    // Eliminar sesiones sin actividad reciente (m√°s de 1 d√≠a / 24 horas)
    if (session.lastActivity && (now - session.lastActivity) > MAX_SESSION_AGE) {
      delete userSessions[userPhone];
      cleanedCount++;
    }
  }
  
  if (cleanedCount > 0) {
    console.log(`üßπ Limpieza autom√°tica: ${cleanedCount} sesiones antiguas eliminadas`);
  }
  
  console.log(`üìä Sesiones activas: ${Object.keys(userSessions).length}`);
};

// Ejecutar limpieza peri√≥dica cada 24 horas
setInterval(cleanupOldSessions, CLEANUP_INTERVAL);

// Ejecutar limpieza inicial 10 segundos despu√©s de arrancar
setTimeout(cleanupOldSessions, 10000);

/**
 * Verifica si la sesi√≥n del usuario ha expirado por inactividad
 */
const isSessionExpired = (userPhone) => {
  if (!userSessions[userPhone]) {
    return true;
  }

  const session = userSessions[userPhone];
  if (!session.lastActivity) {
    return false;
  }

  const now = Date.now();
  const timeSinceLastActivity = now - session.lastActivity;

  if (timeSinceLastActivity > INACTIVITY_TIMEOUT) {
    console.log(`‚è∞ Sesi√≥n expirada por inactividad para ${userPhone} (${Math.round(timeSinceLastActivity / 60000)} minutos)`);
    return true;
  }

  return false;
};

/**
 * Actualiza el timestamp de √∫ltima actividad del usuario
 */
const updateLastActivity = (userPhone) => {
  if (userSessions[userPhone]) {
    userSessions[userPhone].lastActivity = Date.now();
  }
};

/**
 * Normaliza texto quitando tildes y caracteres especiales
 */
const normalizeText = (text) => {
  return text
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/√±/g, 'n')
    .replace(/√ë/g, 'N');
};

/**
 * Verifica si un usuario est√° actualmente hablando con un asesor
 * Si han pasado 24 horas, finaliza autom√°ticamente la conversaci√≥n
 */
const isUserWithAdvisor = (userPhone) => {
  if (!usersWithAdvisor.has(userPhone)) {
    return false;
  }

  const advisorSession = usersWithAdvisor.get(userPhone);
  const now = Date.now();
  const timeSinceStart = now - advisorSession.startTime;

  // Si han pasado 24 horas desde el inicio, finalizar conversaci√≥n autom√°ticamente
  if (timeSinceStart > ADVISOR_CONVERSATION_TIMEOUT) {
    console.log(`‚è∞ Conversaci√≥n con asesor expir√≥ despu√©s de 24h para ${userPhone}`);
    usersWithAdvisor.delete(userPhone);
    return false;
  }

  return true;
};

/**
 * Activa el modo asesor para un usuario
 */
const activateAdvisorMode = async (userPhone, userQuery = '') => {
  const now = Date.now();
  usersWithAdvisor.set(userPhone, {
    startTime: now,
    lastAdvisorMessage: now,
    userQuery: userQuery
  });

  // Notificar al asesor con la consulta del usuario
  const advisorMessage = `üîî *NUEVA SOLICITUD DE ATENCI√ìN*\n\n` +
    `üì± Cliente: +${userPhone}\n` +
    `‚è∞ Hora: ${new Date().toLocaleString('es-CO')}\n\n` +
    `üí¨ *Consulta del cliente:*\n"${userQuery}"\n\n` +
    `Por favor responde desde WhatsApp Business.\n\n` +
    `üìå *Para finalizar la conversaci√≥n:*\n` +
    `Escribe "/finalizar" en este chat (del bot) o dile al cliente que escriba "men√∫".`;

  try {
    await sendTextMessage(ADVISOR_PHONE, advisorMessage);
    console.log(`‚úÖ Notificaci√≥n enviada al asesor para cliente ${userPhone}`);
  } catch (error) {
    console.error('‚ùå Error notificando al asesor:', error);
  }

  // Mensaje al cliente
  const clientMessage = `‚úÖ *Solicitud enviada al asesor*\n\n` +
    `Hemos recibido tu consulta:\n_"${userQuery}"_\n\n` +
    `‚è±Ô∏è Un asesor se contactar√° contigo pronto.\n` +
    `Estate pendiente de la respuesta.\n\n` +
    `_Si deseas volver al men√∫ autom√°tico, escribe *men√∫*_`;

  await sendTextMessage(userPhone, clientMessage);
  console.log(`üë§ Usuario ${userPhone} ahora est√° en modo asesor con consulta: "${userQuery}"`);
  
  // Cambiar estado de la sesi√≥n para que no procese m√°s mensajes como nueva consulta
  if (userSessions[userPhone]) {
    userSessions[userPhone].state = 'WITH_ADVISOR';
  }
};

/**
 * Desactiva el modo asesor para un usuario
 */
const deactivateAdvisorMode = (userPhone) => {
  if (usersWithAdvisor.has(userPhone)) {
    usersWithAdvisor.delete(userPhone);
    console.log(`ü§ñ Bot reactivado para ${userPhone}`);
    return true;
  }
  return false;
};

/**
 * Finaliza la conversaci√≥n desde el lado del asesor
 * Si hay 1 cliente: cierra directamente
 * Si hay varios: muestra men√∫ para elegir
 * Si no hay ninguno: notifica
 */
const finalizeAdvisorConversation = async (advisorPhone) => {
  console.log(`üîç Buscando conversaciones activas para asesor ${advisorPhone}...`);
  
  // Obtener todos los clientes activos con asesor
  const activeClients = Array.from(usersWithAdvisor.entries());
  
  if (activeClients.length === 0) {
    // No hay clientes activos
    await sendTextMessage(
      advisorPhone,
      `‚ö†Ô∏è *No hay conversaciones activas*\n\n` +
      `No se encontr√≥ ning√∫n cliente en conversaci√≥n con asesor en este momento.`
    );
    return false;
  }
  
  if (activeClients.length === 1) {
    // Solo 1 cliente: cerrar directamente
    const [clientPhone, clientData] = activeClients[0];
    await closeClientConversation(clientPhone, advisorPhone);
    return true;
  }
  
  // M√∫ltiples clientes: mostrar men√∫ para elegir
  await showClientSelectionMenu(advisorPhone, activeClients);
  return true;
};

/**
 * Muestra un men√∫ interactivo con los clientes activos para que el asesor elija cu√°l cerrar
 */
const showClientSelectionMenu = async (advisorPhone, activeClients) => {
  console.log(`üìã Mostrando men√∫ de selecci√≥n con ${activeClients.length} clientes activos`);
  
  // Crear botones (m√°ximo 3 por limitaci√≥n de WhatsApp)
  if (activeClients.length <= 3) {
    // Usar botones interactivos
    const buttons = activeClients.map(([clientPhone, clientData], index) => {
      const timeAgo = Math.floor((Date.now() - clientData.startTime) / 60000); // minutos
      return {
        id: `finalizar_${clientPhone}`,
        title: `Cliente ${index + 1} (${timeAgo}m)`
      };
    });
    
    let bodyText = `üîö *Selecciona qu√© conversaci√≥n finalizar:*\n\n`;
    activeClients.forEach(([clientPhone, clientData], index) => {
      const timeAgo = Math.floor((Date.now() - clientData.startTime) / 60000);
      const query = clientData.userQuery || 'Sin consulta';
      const shortQuery = query.length > 30 ? query.substring(0, 30) + '...' : query;
      bodyText += `${index + 1}. +${clientPhone}\n`;
      bodyText += `   ‚è±Ô∏è Hace ${timeAgo} min\n`;
      bodyText += `   üí¨ "${shortQuery}"\n\n`;
    });
    
    await sendInteractiveButtons(advisorPhone, bodyText, buttons);
    
  } else if (activeClients.length <= 10) {
    // Entre 4 y 10 clientes: usar lista interactiva
    const rows = activeClients.map(([clientPhone, clientData], index) => {
      const timeAgo = Math.floor((Date.now() - clientData.startTime) / 60000);
      const query = clientData.userQuery || 'Sin consulta';
      const shortQuery = query.length > 20 ? query.substring(0, 20) + '...' : query;
      
      return {
        id: `finalizar_${clientPhone}`,
        title: `+${clientPhone}`,
        description: `Hace ${timeAgo}m: ${shortQuery}`
      };
    });
    
    const sections = [{
      title: 'Conversaciones activas',
      rows: rows
    }];
    
    await sendInteractiveList(
      advisorPhone,
      `üîö *Tienes ${activeClients.length} conversaciones activas*\n\nSelecciona cu√°l deseas finalizar:`,
      'Ver conversaciones',
      sections
    );
  } else {
    // M√°s de 10 clientes: usar mensaje de texto con n√∫meros
    let message = `üîö *Tienes ${activeClients.length} conversaciones activas*\n\n`;
    message += `Escribe el *n√∫mero* del cliente que deseas finalizar:\n\n`;
    
    activeClients.forEach(([clientPhone, clientData], index) => {
      const timeAgo = Math.floor((Date.now() - clientData.startTime) / 60000);
      const query = clientData.userQuery || 'Sin consulta';
      const shortQuery = query.length > 40 ? query.substring(0, 40) + '...' : query;
      
      message += `*${index + 1}.* +${clientPhone}\n`;
      message += `   ‚è±Ô∏è Hace ${timeAgo} min\n`;
      message += `   üí¨ "${shortQuery}"\n\n`;
    });
    
    message += `_Ejemplo: Escribe *1* para finalizar la primera conversaci√≥n_`;
    
    await sendTextMessage(advisorPhone, message);
    
    // Guardar el estado para procesar la respuesta num√©rica
    if (!userSessions[advisorPhone]) {
      userSessions[advisorPhone] = {};
    }
    userSessions[advisorPhone].state = 'SELECTING_CLIENT_TO_FINALIZE';
    userSessions[advisorPhone].clientList = activeClients;
  }
};

/**
 * Cierra la conversaci√≥n con un cliente espec√≠fico
 */
const closeClientConversation = async (clientPhone, advisorPhone) => {
  console.log(`‚úÖ Finalizando conversaci√≥n con cliente ${clientPhone}`);
  
  // Desactivar modo asesor para ese cliente
  deactivateAdvisorMode(clientPhone);
  
  // Notificar al cliente que la conversaci√≥n finaliz√≥
  await sendTextMessage(
    clientPhone,
    `‚úÖ *Conversaci√≥n finalizada*\n\n` +
    `El asesor ha finalizado la atenci√≥n.\n\n` +
    `Gracias por contactarnos. Si necesitas m√°s ayuda, escribe *men√∫* para ver las opciones disponibles.`
  );
  
  // NO mostramos el men√∫ autom√°ticamente, esperamos a que el cliente escriba "men√∫"
  
  // Confirmar al asesor
  await sendTextMessage(
    advisorPhone,
    `‚úÖ *Conversaci√≥n finalizada correctamente*\n\n` +
    `Cliente: +${clientPhone}\n` +
    `El bot ha sido reactivado para este cliente.`
  );
};

/**
 * Maneja la selecci√≥n del men√∫ seg√∫n el mensaje del usuario
 */
const handleMenuSelection = async (userPhone, message) => {
  const messageText = message.toLowerCase().trim();

  // COMANDO /FINALIZAR DESDE EL ASESOR
  if (messageText === '/finalizar' && userPhone === ADVISOR_PHONE) {
    console.log(`üîö Comando /finalizar recibido del asesor`);
    await finalizeAdvisorConversation(userPhone);
    return;
  }

  // SELECCI√ìN NUM√âRICA DE CLIENTE (cuando hay m√°s de 10 clientes)
  if (userPhone === ADVISOR_PHONE && 
      userSessions[userPhone]?.state === 'SELECTING_CLIENT_TO_FINALIZE') {
    const selectedNumber = parseInt(messageText);
    const clientList = userSessions[userPhone].clientList;
    
    if (isNaN(selectedNumber) || selectedNumber < 1 || selectedNumber > clientList.length) {
      await sendTextMessage(
        userPhone,
        `‚ùå *N√∫mero inv√°lido*\n\nPor favor escribe un n√∫mero entre 1 y ${clientList.length}`
      );
      return;
    }
    
    // Obtener el cliente seleccionado (√≠ndice empieza en 0)
    const [clientPhone, clientData] = clientList[selectedNumber - 1];
    console.log(`üîö Asesor seleccion√≥ finalizar conversaci√≥n con ${clientPhone} (opci√≥n ${selectedNumber})`);
    
    // Limpiar el estado
    delete userSessions[userPhone].state;
    delete userSessions[userPhone].clientList;
    
    // Verificar que el cliente todav√≠a est√° activo
    if (usersWithAdvisor.has(clientPhone)) {
      await closeClientConversation(clientPhone, userPhone);
    } else {
      await sendTextMessage(
        userPhone,
        `‚ùå *Error*\n\nEse cliente ya no est√° en conversaci√≥n activa.`
      );
    }
    return;
  }

  // SELECCI√ìN DE CLIENTE PARA FINALIZAR (desde men√∫ interactivo)
  if (userPhone === ADVISOR_PHONE && messageText.startsWith('finalizar_')) {
    const clientPhone = messageText.replace('finalizar_', '');
    console.log(`üîö Asesor seleccion√≥ finalizar conversaci√≥n con ${clientPhone}`);
    
    // Verificar que el cliente est√° realmente en conversaci√≥n con asesor
    if (usersWithAdvisor.has(clientPhone)) {
      await closeClientConversation(clientPhone, userPhone);
    } else {
      await sendTextMessage(
        userPhone,
        `‚ùå *Error*\n\nEse cliente ya no est√° en conversaci√≥n activa.`
      );
    }
    return;
  }

  // BOTONES DEL MEN√ö PRINCIPAL (respuestas interactivas)
  if (messageText.startsWith('menu_')) {
    const menuOption = messageText.replace('menu_', '');
    
    if (menuOption === 'catalogo') {
      // Simular selecci√≥n de opci√≥n 1
      await handleMainMenuSelection(userPhone, '1');
      return;
    } else if (menuOption === 'asesor') {
      // Simular selecci√≥n de opci√≥n 2
      await handleMainMenuSelection(userPhone, '2');
      return;
    } else if (menuOption === 'horarios') {
      // Simular selecci√≥n de opci√≥n 3
      await handleMainMenuSelection(userPhone, '3');
      return;
    }
  }

  // VERIFICAR SI ESTABA CON ASESOR PERO EXPIR√ì (24 horas)
  if (usersWithAdvisor.has(userPhone)) {
    const advisorSession = usersWithAdvisor.get(userPhone);
    const timeSinceStart = Date.now() - advisorSession.startTime;
    
    if (timeSinceStart > ADVISOR_CONVERSATION_TIMEOUT) {
      // Conversaci√≥n expir√≥ - cierre silencioso (sin mensaje)
      console.log(`‚è∞ Conversaci√≥n con asesor expir√≥ (24h) para ${userPhone} - Cierre silencioso`);
      usersWithAdvisor.delete(userPhone);
      
      // Simplemente mostrar el men√∫ normalmente (experiencia fluida)
      await showMainMenu(userPhone);
      return;
    }
  }

  // SI EL USUARIO EST√Å CON UN ASESOR (y NO ha expirado)
  if (isUserWithAdvisor(userPhone)) {
    // Si escribe "men√∫", desactivar modo asesor y volver al bot
    if (messageText === 'menu' || messageText === 'men√∫' || messageText === 'inicio') {
      deactivateAdvisorMode(userPhone);
      await sendTextMessage(userPhone, '‚úÖ Conversaci√≥n con asesor finalizada.\n\nü§ñ Bot reactivado. Volviendo al men√∫ principal...');
      await showMainMenu(userPhone);
      return;
    }
    
    // Actualizar actividad y enviar recordatorio
    updateLastActivity(userPhone);
    
    // Enviar mensaje recordatorio al usuario
    await sendTextMessage(
      userPhone,
      `‚è≥ *En conversaci√≥n con asesor*\n\n` +
      `Tu consulta fue enviada. El asesor te responder√° pronto.\n\n` +
      `üí¨ Puedes seguir escribiendo y el asesor ver√° tus mensajes.\n\n` +
      `_No finalices la sesi√≥n, pero si deseas volver al men√∫ autom√°tico, escribe *men√∫*_`
    );
    
    console.log(`üë§ Mensaje de ${userPhone} recibido - est√° en conversaci√≥n con asesor`);
    return;
  }

  // VERIFICAR SI LA SESI√ìN EXPIR√ì POR INACTIVIDAD (solo si NO est√° con asesor)
  if (isSessionExpired(userPhone)) {
    console.log(`üîÑ Sesi√≥n expirada para ${userPhone}. Mostrando men√∫ principal...`);
    // Limpiar modo asesor si estaba activo
    deactivateAdvisorMode(userPhone);
    // Notificar al usuario que su sesi√≥n expir√≥
    await sendTextMessage(
      userPhone,
      `‚è±Ô∏è *Tu sesi√≥n ha expirado*\n\n` +
      `Por inactividad, hemos reiniciado la conversaci√≥n.\n\n` +
      `A continuaci√≥n, ver√°s el men√∫ principal. üëá`
    );
    // Mostrar men√∫ de bienvenida
    await showMainMenu(userPhone);
    return;
  }

  // Actualizar timestamp de √∫ltima actividad
  updateLastActivity(userPhone);

  // Inicializar sesi√≥n si no existe
  if (!userSessions[userPhone]) {
    userSessions[userPhone] = {
      state: 'MAIN_MENU',
      cart: [],
      selectedCategory: null,
      selectedSubcategory: null,
      categoriesList: [],
      subcategoriesList: []
    };
  }

  const session = userSessions[userPhone];

  try {
    // Comandos globales
    if (messageText === 'hola' || messageText === 'menu' || messageText === 'men√∫' || messageText === 'inicio') {
      await showMainMenu(userPhone);
      return;
    }

    // Navegaci√≥n seg√∫n el estado de la sesi√≥n
    switch (session.state) {
      case 'MAIN_MENU':
        await handleMainMenuSelection(userPhone, messageText);
        break;
      
      case 'WAITING_ADVISOR_QUERY':
        // El usuario escribi√≥ su consulta, ahora activar modo asesor con esa consulta
        await activateAdvisorMode(userPhone, message);
        break;
      
      case 'WITH_ADVISOR':
        // El usuario ya est√° con asesor, este caso ya se maneja arriba
        // No deber√≠a llegar aqu√≠ porque isUserWithAdvisor() ya lo captura
        console.log(`‚ö†Ô∏è Usuario ${userPhone} en estado WITH_ADVISOR pero no est√° en usersWithAdvisor`);
        await showMainMenu(userPhone);
        break;
      
      case 'CATEGORY_LIST':
        await handleCategorySelection(userPhone, messageText);
        break;
      
      case 'SUBCATEGORY_LIST':
        await handleSubcategorySelection(userPhone, messageText);
        break;

      default:
        await showMainMenu(userPhone);
    }
  } catch (error) {
    console.error('Error manejando selecci√≥n:', error);
    await sendTextMessage(userPhone, '‚ùå Ocurri√≥ un error. Por favor intenta de nuevo.');
    await showMainMenu(userPhone);
  }
};

/**
 * Muestra el men√∫ principal
 */
const showMainMenu = async (userPhone) => {
  userSessions[userPhone] = {
    state: 'MAIN_MENU',
    cart: [],
    selectedCategory: null,
    selectedSubcategory: null,
    categoriesList: [],
    subcategoriesList: [],
    lastActivity: Date.now()
  };

  // Crear botones interactivos del men√∫ principal
  const buttons = [
    {
      id: 'menu_catalogo',
      title: 'üì¶ Ver cat√°logo'
    },
    {
      id: 'menu_asesor',
      title: 'üí¨ Hablar con asesor'
    },
    {
      id: 'menu_horarios',
      title: 'üïí Ver horarios'
    }
  ];

  const bodyText = `üëã *¬°Bienvenido a Zona Repuestera!*\n\n` +
    `üöó Somos tu tienda de confianza para autopartes de calidad.\n\n` +
    `*¬øQu√© deseas hacer?*\n\n` +
    `_Si est√°s ausente durante 7 minutos, se terminar√° la sesi√≥n._`;

  await sendInteractiveButtons(userPhone, bodyText, buttons);
};

/**
 * Maneja la selecci√≥n en el men√∫ principal
 */
const handleMainMenuSelection = async (userPhone, messageText) => {
  // Aceptar n√∫mero o palabra clave
  if (messageText === '1' || messageText.includes('cat√°logo') || messageText.includes('catalogo') || messageText.includes('producto')) {
    await showCategories(userPhone);
  } else if (messageText === '2' || messageText.includes('asesor') || messageText.includes('asesora') || messageText.includes('ayuda')) {
    // Cambiar estado para esperar la consulta del usuario
    userSessions[userPhone].state = 'WAITING_ADVISOR_QUERY';
    await sendTextMessage(
      userPhone,
      `üìù *Cu√©ntanos tu consulta*\n\n` +
      `Por favor, escribe en detalle qu√© informaci√≥n necesitas o en qu√© podemos ayudarte.\n\n` +
      `Un asesor recibir√° tu mensaje y se contactar√° contigo *en breve*.\n\n` +
      `üí¨ _Escribe tu consulta ahora:_`
    );
  } else if (messageText === '3' || messageText.includes('horario')) {
    const mensaje = `üïí *HORARIOS DE ATENCI√ìN*\n\n` +
      `Lunes a Viernes: 8:00 AM - 6:00 PM\n` +
      `S√°bados: 8:00 AM - 2:00 PM\n` +
      `Domingos: Cerrado\n\n` +
      `Escribe *men√∫* para volver al inicio.`;
    await sendTextMessage(userPhone, mensaje);
  } else {
    await sendTextMessage(
      userPhone,
      '‚ùå Opci√≥n no v√°lida.\n\nPor favor escribe el *n√∫mero* de la opci√≥n que deseas (1, 2 o 3).\n\nO escribe *men√∫* para ver las opciones.'
    );
  }
};

/**
 * Muestra la lista de categor√≠as
 */
const showCategories = async (userPhone) => {
  userSessions[userPhone].state = 'CATEGORY_LIST';
  await sendTextMessage(userPhone, '‚è≥ Cargando cat√°logo...');
  
  try {
    const categories = await getCategories();
    
    if (!categories || categories.length === 0) {
      await sendTextMessage(userPhone, '‚ùå No hay categor√≠as disponibles en este momento.');
      await showMainMenu(userPhone);
      return;
    }

    // Guardar categor√≠as en la sesi√≥n
    userSessions[userPhone].categoriesList = categories;

    // Crear mensaje con todas las categor√≠as numeradas
    let mensaje = `üìã *CATEGOR√çAS DISPONIBLES*\n\n`;
    
    categories.forEach((cat, index) => {
      const numero = index + 1;
      const subcatInfo = cat.subcategory_count ? `\t\t(${cat.subcategory_count} subcategor√≠as)` : '';
      mensaje += `${numero}. ${cat.name}${subcatInfo}\n`;
    });
    
    mensaje += `\nüí¨ *Escribe el n√∫mero* de la categor√≠a que deseas ver.`;
    mensaje += `\n\n_Ejemplo: escribe *1* para ver ${categories[0].name}_`;
    mensaje += `\n\nEscribe *men√∫* para volver al inicio.`;

    await sendTextMessage(userPhone, mensaje);
  } catch (error) {
    console.error('Error mostrando categor√≠as:', error);
    await sendTextMessage(userPhone, '‚ùå Error al cargar el cat√°logo. Intenta de nuevo m√°s tarde.');
    await showMainMenu(userPhone);
  }
};

/**
 * Maneja la selecci√≥n de categor√≠a
 */
const handleCategorySelection = async (userPhone, message) => {
  // El usuario escribe un n√∫mero
  const numero = parseInt(message.trim());
  
  if (isNaN(numero) || numero < 1) {
    await sendTextMessage(userPhone, '‚ùå Por favor escribe un n√∫mero v√°lido.\n\nEscribe *cat√°logo* para ver las categor√≠as de nuevo.');
    return;
  }

  const categories = userSessions[userPhone].categoriesList || [];
  
  if (numero > categories.length) {
    await sendTextMessage(userPhone, `‚ùå N√∫mero inv√°lido. Tenemos ${categories.length} categor√≠as.\n\nEscribe *cat√°logo* para ver la lista.`);
    return;
  }

  // Obtener la categor√≠a seleccionada (√≠ndice = n√∫mero - 1)
  const selectedCategory = categories[numero - 1];
  userSessions[userPhone].selectedCategory = selectedCategory.id;
  
  await showSubCategories(userPhone, selectedCategory.id);
};

/**
 * Muestra las subcategor√≠as de una categor√≠a
 */
const showSubCategories = async (userPhone, categoryId) => {
  userSessions[userPhone].state = 'SUBCATEGORY_LIST';
  await sendTextMessage(userPhone, '‚è≥ Cargando subcategor√≠as...');
  
  try {
    const subcategories = await getSubCategories(categoryId);
    
    if (!subcategories || subcategories.length === 0) {
      await sendTextMessage(userPhone, '‚ùå No hay subcategor√≠as disponibles para esta categor√≠a.');
      await showCategories(userPhone);
      return;
    }

    // Guardar subcategor√≠as en la sesi√≥n
    userSessions[userPhone].subcategoriesList = subcategories;

    // Crear mensaje con todas las subcategor√≠as numeradas
    let mensaje = `üìã *SUBCATEGOR√çAS DISPONIBLES*\n\n`;
    
    subcategories.forEach((subcat, index) => {
      const numero = index + 1;
      mensaje += `${numero}. ${subcat.name}\n`;
    });
    
    mensaje += `\nüí¨ *Escribe el n√∫mero* de la subcategor√≠a que deseas ver.`;
    mensaje += `\n\n_Ejemplo: escribe *1* para ver ${subcategories[0].name}_`;
    mensaje += `\n\nEscribe *men√∫* para volver al inicio.`;

    await sendTextMessage(userPhone, mensaje);
  } catch (error) {
    console.error('Error mostrando subcategor√≠as:', error);
    await sendTextMessage(userPhone, '‚ùå Error al cargar subcategor√≠as.');
    await showCategories(userPhone);
  }
};

/**
 * Maneja la selecci√≥n de subcategor√≠a
 */
const handleSubcategorySelection = async (userPhone, message) => {
  // El usuario escribe un n√∫mero
  const numero = parseInt(message.trim());
  
  if (isNaN(numero) || numero < 1) {
    await sendTextMessage(userPhone, '‚ùå Por favor escribe un n√∫mero v√°lido.\n\nEscribe *cat√°logo* para volver al inicio.');
    return;
  }

  const subcategories = userSessions[userPhone].subcategoriesList || [];
  
  if (numero > subcategories.length) {
    await sendTextMessage(userPhone, `‚ùå N√∫mero inv√°lido. Hay ${subcategories.length} subcategor√≠as.\n\nEscribe *cat√°logo* para volver al inicio.`);
    return;
  }

  // Obtener la subcategor√≠a seleccionada (√≠ndice = n√∫mero - 1)
  const selectedSubcategory = subcategories[numero - 1];
  userSessions[userPhone].selectedSubcategory = selectedSubcategory.id;
  userSessions[userPhone].selectedSubcategoryData = selectedSubcategory; // Guardar datos completos
  
  // Primero verificar si esta subcategor√≠a tiene m√°s subcategor√≠as
  await sendTextMessage(userPhone, '‚è≥ Verificando opciones disponibles...');
  
  const subSubcategories = await getSubCategories(selectedSubcategory.id);
  
  if (subSubcategories && subSubcategories.length > 0) {
    // Si tiene sub-subcategor√≠as, mostrarlas
    await showSubCategories(userPhone, selectedSubcategory.id);
  } else {
    // Si no tiene m√°s subcategor√≠as, mostrar productos
    await showProducts(userPhone, selectedSubcategory.id);
  }
};

/**
 * Muestra los productos de una subcategor√≠a
 */
const showProducts = async (userPhone, subcategoryId) => {
  userSessions[userPhone].state = 'PRODUCT_LIST';
  await sendTextMessage(userPhone, '‚è≥ Cargando productos...');
  
  try {
    const products = await getProducts(subcategoryId);
    
    if (!products || products.length === 0) {
      await sendTextMessage(userPhone, '‚ùå No hay productos disponibles en esta subcategor√≠a.');
      const categoryId = userSessions[userPhone].selectedCategory;
      await showSubCategories(userPhone, categoryId);
      return;
    }

    // Formatear y enviar productos como mensajes de texto
    // WhatsApp limita el mensaje a 4096 caracteres, as√≠ que limitamos a 10 productos
    const maxProducts = 10;
    const productsToShow = products.slice(0, maxProducts);
    
    let mensaje = `üõí *Productos Disponibles* (${products.length})\n\n`;
    
    productsToShow.forEach((prod, index) => {
      // Formatear precio en pesos colombianos
      const price = prod.final_price || prod.price || prod.base_price || 0;
      const formattedPrice = new Intl.NumberFormat('es-CO', {
        style: 'currency',
        currency: 'COP',
        minimumFractionDigits: 0
      }).format(price);
      
      // Nombre del producto sin asteriscos para evitar negrilla inconsistente
      mensaje += `${index + 1}. ${prod.name}\n`;
      mensaje += `   üí∞ Precio: ${formattedPrice}\n`;
      
      // Agregar c√≥digo si existe
      if (prod.code || prod.sku) {
        mensaje += `   üîñ C√≥digo: ${prod.code || prod.sku}\n`;
      }
      
      // Agregar stock si existe
      if (prod.stock !== undefined && prod.stock !== null) {
        const stockStatus = prod.stock > 0 ? `‚úÖ ${prod.stock} disponibles` : '‚ùå Agotado';
        mensaje += `   üì¶ Stock: ${stockStatus}\n`;
      }
      
      mensaje += '\n';
    });
    
    if (products.length > maxProducts) {
      mensaje += `_Mostrando ${maxProducts} de ${products.length} productos_\n\n`;
    }
    
    // Obtener datos de la subcategor√≠a para generar el link correcto
    const subcategoryData = userSessions[userPhone].selectedSubcategoryData;
    const categoryId = userSessions[userPhone].selectedCategory;
    
    if (categoryId && subcategoryId) {
      // Link directo a los productos de esta subcategor√≠a
      mensaje += `üåê *Ver m√°s informaci√≥n en la web:*\n`;
      mensaje += `https://zonarepuestera.com.co/products/?category=${categoryId}&subcategory=${subcategoryId}\n\n`;
    } else if (categoryId) {
      // Fallback: mostrar subcategor√≠as de la categor√≠a
      mensaje += `üåê *Ver m√°s en la tienda:*\n`;
      mensaje += `https://zonarepuestera.com.co/sub-categories/?category=${categoryId}\n\n`;
    } else {
      // Fallback general: link a productos
      mensaje += `üåê *Ver m√°s en la tienda:*\n`;
      mensaje += `https://zonarepuestera.com.co/products/\n\n`;
    }
    
    mensaje += `Escribe *men√∫* para volver al inicio o *cat√°logo* para seguir navegando.`;
    
    await sendTextMessage(userPhone, mensaje);
    userSessions[userPhone].state = 'MAIN_MENU';
    
  } catch (error) {
    console.error('Error mostrando productos:', error);
    await sendTextMessage(userPhone, '‚ùå Error al cargar productos.');
    const categoryId = userSessions[userPhone].selectedCategory;
    await showSubCategories(userPhone, categoryId);
  }
};

module.exports = {
  handleMenuSelection,
  showMainMenu,
  isUserWithAdvisor,
  deactivateAdvisorMode,
  finalizeAdvisorConversation,
  updateLastActivity  // Exportar para que el webhook la pueda usar
};
